//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace SampleNavigationHelix
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        private global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[106];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "HelixToolkit.WinUI.Viewport3DX";
            _typeNameTable[5] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[6] = "HelixToolkit.WinUI.ObservableElement3DCollection";
            _typeNameTable[7] = "System.Collections.ObjectModel.ObservableCollection`1<HelixToolkit.WinUI.Element3D>";
            _typeNameTable[8] = "System.Collections.ObjectModel.Collection`1<HelixToolkit.WinUI.Element3D>";
            _typeNameTable[9] = "HelixToolkit.WinUI.Element3D";
            _typeNameTable[10] = "HelixToolkit.WinUI.Model.Element3DCore";
            _typeNameTable[11] = "SharpDX.Matrix";
            _typeNameTable[12] = "System.ValueType";
            _typeNameTable[13] = "Int32";
            _typeNameTable[14] = "Guid";
            _typeNameTable[15] = "HelixToolkit.SharpDX.Core.Model.Scene.SceneNode";
            _typeNameTable[16] = "HelixToolkit.SharpDX.Core.DisposeObject";
            _typeNameTable[17] = "SharpDX.BoundingBox";
            _typeNameTable[18] = "SharpDX.BoundingSphere";
            _typeNameTable[19] = "Windows.UI.Color";
            _typeNameTable[20] = "HelixToolkit.SharpDX.Core.CameraMode";
            _typeNameTable[21] = "System.Enum";
            _typeNameTable[22] = "HelixToolkit.SharpDX.Core.CameraRotationMode";
            _typeNameTable[23] = "HelixToolkit.SharpDX.Core.FXAALevel";
            _typeNameTable[24] = "Windows.UI.Core.CoreCursorType";
            _typeNameTable[25] = "HelixToolkit.WinUI.InputBindingCollection";
            _typeNameTable[26] = "System.Collections.ObjectModel.ObservableCollection`1<HelixToolkit.WinUI.InputBinding>";
            _typeNameTable[27] = "System.Collections.ObjectModel.Collection`1<HelixToolkit.WinUI.InputBinding>";
            _typeNameTable[28] = "HelixToolkit.WinUI.InputBinding";
            _typeNameTable[29] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[30] = "System.Windows.Input.ICommand";
            _typeNameTable[31] = "Microsoft.UI.Xaml.UIElement";
            _typeNameTable[32] = "HelixToolkit.WinUI.InputGesture";
            _typeNameTable[33] = "HelixToolkit.SharpDX.Core.IRenderHost";
            _typeNameTable[34] = "HelixToolkit.SharpDX.Core.Cameras.CameraCore";
            _typeNameTable[35] = "HelixToolkit.SharpDX.Core.Model.ObservableObject";
            _typeNameTable[36] = "HelixToolkit.WinUI.ManipulationBindingCollection";
            _typeNameTable[37] = "System.Collections.ObjectModel.ObservableCollection`1<HelixToolkit.WinUI.ManipulationBinding>";
            _typeNameTable[38] = "System.Collections.ObjectModel.Collection`1<HelixToolkit.WinUI.ManipulationBinding>";
            _typeNameTable[39] = "HelixToolkit.WinUI.ManipulationBinding";
            _typeNameTable[40] = "HelixToolkit.WinUI.ViewportCommand";
            _typeNameTable[41] = "HelixToolkit.WinUI.ManipulationGesture";
            _typeNameTable[42] = "System.Collections.Generic.IEnumerable`1<HelixToolkit.SharpDX.Core.Model.Scene.SceneNode>";
            _typeNameTable[43] = "System.Collections.Generic.IEnumerable`1<HelixToolkit.SharpDX.Core.Model.Scene2D.SceneNode2D>";
            _typeNameTable[44] = "HelixToolkit.SharpDX.Core.RenderContext";
            _typeNameTable[45] = "SharpDX.Rectangle";
            _typeNameTable[46] = "HelixToolkit.SharpDX.Core.IEffectsManager";
            _typeNameTable[47] = "HelixToolkit.WinUI.Camera";
            _typeNameTable[48] = "HelixToolkit.WinUI.ProjectionCamera";
            _typeNameTable[49] = "SharpDX.Vector3";
            _typeNameTable[50] = "String";
            _typeNameTable[51] = "Double";
            _typeNameTable[52] = "System.IO.Stream";
            _typeNameTable[53] = "System.MarshalByRefObject";
            _typeNameTable[54] = "HelixToolkit.WinUI.InputController";
            _typeNameTable[55] = "System.Exception";
            _typeNameTable[56] = "HelixToolkit.SharpDX.Core.OITRenderType";
            _typeNameTable[57] = "HelixToolkit.SharpDX.Core.OITWeightMode";
            _typeNameTable[58] = "HelixToolkit.SharpDX.Core.IModelContainer";
            _typeNameTable[59] = "HelixToolkit.SharpDX.Core.SSAOQuality";
            _typeNameTable[60] = "HelixToolkit.WinUI.GroupModel3D";
            _typeNameTable[61] = "HelixToolkit.WinUI.GroupElement3D";
            _typeNameTable[62] = "System.Collections.Generic.IList`1<HelixToolkit.WinUI.Element3D>";
            _typeNameTable[63] = "HelixToolkit.WinUI.IOctreeManagerWrapper";
            _typeNameTable[64] = "Microsoft.UI.Xaml.Controls.ItemCollection";
            _typeNameTable[65] = "SampleNavigationHelix.CustomUIElement.CustomBox3D";
            _typeNameTable[66] = "HelixToolkit.WinUI.BatchedMeshGeometryModel3D";
            _typeNameTable[67] = "System.Collections.Generic.IList`1<HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig>";
            _typeNameTable[68] = "HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig";
            _typeNameTable[69] = "HelixToolkit.SharpDX.Core.Geometry3D";
            _typeNameTable[70] = "System.Collections.Generic.IList`1<HelixToolkit.WinUI.Material>";
            _typeNameTable[71] = "HelixToolkit.WinUI.Material";
            _typeNameTable[72] = "HelixToolkit.SharpDX.Core.Model.MaterialCore";
            _typeNameTable[73] = "SharpDX.Direct3D11.FillMode";
            _typeNameTable[74] = "SharpDX.Direct3D11.CullMode";
            _typeNameTable[75] = "HelixToolkit.WinUI.AmbientLight3D";
            _typeNameTable[76] = "HelixToolkit.WinUI.Light3D";
            _typeNameTable[77] = "HelixToolkit.SharpDX.Core.LightType";
            _typeNameTable[78] = "HelixToolkit.WinUI.ItemsModel3D";
            _typeNameTable[79] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[80] = "System.Collections.IEnumerable";
            _typeNameTable[81] = "Microsoft.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[82] = "SampleNavigationHelix.Views.HelixPageView";
            _typeNameTable[83] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[84] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[85] = "SampleNavigationHelix.ViewModels.HelixViewModel";
            _typeNameTable[86] = "Microsoft.UI.Xaml.Controls.NavigationView";
            _typeNameTable[87] = "Microsoft.UI.Xaml.Controls.ContentControl";
            _typeNameTable[88] = "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible";
            _typeNameTable[89] = "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus";
            _typeNameTable[90] = "System.Collections.Generic.IList`1<Object>";
            _typeNameTable[91] = "Microsoft.UI.Xaml.Controls.AutoSuggestBox";
            _typeNameTable[92] = "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode";
            _typeNameTable[93] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[94] = "Microsoft.UI.Xaml.Controls.StyleSelector";
            _typeNameTable[95] = "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode";
            _typeNameTable[96] = "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode";
            _typeNameTable[97] = "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled";
            _typeNameTable[98] = "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings";
            _typeNameTable[99] = "Microsoft.UI.Xaml.Controls.NavigationViewItem";
            _typeNameTable[100] = "Microsoft.UI.Xaml.Controls.NavigationViewItemBase";
            _typeNameTable[101] = "Microsoft.UI.Xaml.Controls.IconElement";
            _typeNameTable[102] = "SampleNavigationHelix.Views.MainWindow";
            _typeNameTable[103] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[104] = "SampleNavigationHelix.ViewModels.MainWindowViewModel";
            _typeNameTable[105] = "SampleNavigationHelix.Views.Page1View";

            _typeTable = new global::System.Type[106];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::HelixToolkit.WinUI.Viewport3DX);
            _typeTable[5] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[6] = typeof(global::HelixToolkit.WinUI.ObservableElement3DCollection);
            _typeTable[7] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::HelixToolkit.WinUI.Element3D>);
            _typeTable[8] = typeof(global::System.Collections.ObjectModel.Collection<global::HelixToolkit.WinUI.Element3D>);
            _typeTable[9] = typeof(global::HelixToolkit.WinUI.Element3D);
            _typeTable[10] = typeof(global::HelixToolkit.WinUI.Model.Element3DCore);
            _typeTable[11] = typeof(global::SharpDX.Matrix);
            _typeTable[12] = typeof(global::System.ValueType);
            _typeTable[13] = typeof(global::System.Int32);
            _typeTable[14] = typeof(global::System.Guid);
            _typeTable[15] = typeof(global::HelixToolkit.SharpDX.Core.Model.Scene.SceneNode);
            _typeTable[16] = typeof(global::HelixToolkit.SharpDX.Core.DisposeObject);
            _typeTable[17] = typeof(global::SharpDX.BoundingBox);
            _typeTable[18] = typeof(global::SharpDX.BoundingSphere);
            _typeTable[19] = typeof(global::Windows.UI.Color);
            _typeTable[20] = typeof(global::HelixToolkit.SharpDX.Core.CameraMode);
            _typeTable[21] = typeof(global::System.Enum);
            _typeTable[22] = typeof(global::HelixToolkit.SharpDX.Core.CameraRotationMode);
            _typeTable[23] = typeof(global::HelixToolkit.SharpDX.Core.FXAALevel);
            _typeTable[24] = typeof(global::Windows.UI.Core.CoreCursorType);
            _typeTable[25] = typeof(global::HelixToolkit.WinUI.InputBindingCollection);
            _typeTable[26] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::HelixToolkit.WinUI.InputBinding>);
            _typeTable[27] = typeof(global::System.Collections.ObjectModel.Collection<global::HelixToolkit.WinUI.InputBinding>);
            _typeTable[28] = typeof(global::HelixToolkit.WinUI.InputBinding);
            _typeTable[29] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[30] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[31] = typeof(global::Microsoft.UI.Xaml.UIElement);
            _typeTable[32] = typeof(global::HelixToolkit.WinUI.InputGesture);
            _typeTable[33] = typeof(global::HelixToolkit.SharpDX.Core.IRenderHost);
            _typeTable[34] = typeof(global::HelixToolkit.SharpDX.Core.Cameras.CameraCore);
            _typeTable[35] = typeof(global::HelixToolkit.SharpDX.Core.Model.ObservableObject);
            _typeTable[36] = typeof(global::HelixToolkit.WinUI.ManipulationBindingCollection);
            _typeTable[37] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::HelixToolkit.WinUI.ManipulationBinding>);
            _typeTable[38] = typeof(global::System.Collections.ObjectModel.Collection<global::HelixToolkit.WinUI.ManipulationBinding>);
            _typeTable[39] = typeof(global::HelixToolkit.WinUI.ManipulationBinding);
            _typeTable[40] = typeof(global::HelixToolkit.WinUI.ViewportCommand);
            _typeTable[41] = typeof(global::HelixToolkit.WinUI.ManipulationGesture);
            _typeTable[42] = typeof(global::System.Collections.Generic.IEnumerable<global::HelixToolkit.SharpDX.Core.Model.Scene.SceneNode>);
            _typeTable[43] = typeof(global::System.Collections.Generic.IEnumerable<global::HelixToolkit.SharpDX.Core.Model.Scene2D.SceneNode2D>);
            _typeTable[44] = typeof(global::HelixToolkit.SharpDX.Core.RenderContext);
            _typeTable[45] = typeof(global::SharpDX.Rectangle);
            _typeTable[46] = typeof(global::HelixToolkit.SharpDX.Core.IEffectsManager);
            _typeTable[47] = typeof(global::HelixToolkit.WinUI.Camera);
            _typeTable[48] = typeof(global::HelixToolkit.WinUI.ProjectionCamera);
            _typeTable[49] = typeof(global::SharpDX.Vector3);
            _typeTable[50] = typeof(global::System.String);
            _typeTable[51] = typeof(global::System.Double);
            _typeTable[52] = typeof(global::System.IO.Stream);
            _typeTable[53] = typeof(global::System.MarshalByRefObject);
            _typeTable[54] = typeof(global::HelixToolkit.WinUI.InputController);
            _typeTable[55] = typeof(global::System.Exception);
            _typeTable[56] = typeof(global::HelixToolkit.SharpDX.Core.OITRenderType);
            _typeTable[57] = typeof(global::HelixToolkit.SharpDX.Core.OITWeightMode);
            _typeTable[58] = typeof(global::HelixToolkit.SharpDX.Core.IModelContainer);
            _typeTable[59] = typeof(global::HelixToolkit.SharpDX.Core.SSAOQuality);
            _typeTable[60] = typeof(global::HelixToolkit.WinUI.GroupModel3D);
            _typeTable[61] = typeof(global::HelixToolkit.WinUI.GroupElement3D);
            _typeTable[62] = typeof(global::System.Collections.Generic.IList<global::HelixToolkit.WinUI.Element3D>);
            _typeTable[63] = typeof(global::HelixToolkit.WinUI.IOctreeManagerWrapper);
            _typeTable[64] = typeof(global::Microsoft.UI.Xaml.Controls.ItemCollection);
            _typeTable[65] = typeof(global::SampleNavigationHelix.CustomUIElement.CustomBox3D);
            _typeTable[66] = typeof(global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D);
            _typeTable[67] = typeof(global::System.Collections.Generic.IList<global::HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig>);
            _typeTable[68] = typeof(global::HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig);
            _typeTable[69] = typeof(global::HelixToolkit.SharpDX.Core.Geometry3D);
            _typeTable[70] = typeof(global::System.Collections.Generic.IList<global::HelixToolkit.WinUI.Material>);
            _typeTable[71] = typeof(global::HelixToolkit.WinUI.Material);
            _typeTable[72] = typeof(global::HelixToolkit.SharpDX.Core.Model.MaterialCore);
            _typeTable[73] = typeof(global::SharpDX.Direct3D11.FillMode);
            _typeTable[74] = typeof(global::SharpDX.Direct3D11.CullMode);
            _typeTable[75] = typeof(global::HelixToolkit.WinUI.AmbientLight3D);
            _typeTable[76] = typeof(global::HelixToolkit.WinUI.Light3D);
            _typeTable[77] = typeof(global::HelixToolkit.SharpDX.Core.LightType);
            _typeTable[78] = typeof(global::HelixToolkit.WinUI.ItemsModel3D);
            _typeTable[79] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[80] = typeof(global::System.Collections.IEnumerable);
            _typeTable[81] = typeof(global::Microsoft.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[82] = typeof(global::SampleNavigationHelix.Views.HelixPageView);
            _typeTable[83] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[84] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[85] = typeof(global::SampleNavigationHelix.ViewModels.HelixViewModel);
            _typeTable[86] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationView);
            _typeTable[87] = typeof(global::Microsoft.UI.Xaml.Controls.ContentControl);
            _typeTable[88] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible);
            _typeTable[89] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus);
            _typeTable[90] = typeof(global::System.Collections.Generic.IList<global::System.Object>);
            _typeTable[91] = typeof(global::Microsoft.UI.Xaml.Controls.AutoSuggestBox);
            _typeTable[92] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode);
            _typeTable[93] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[94] = typeof(global::Microsoft.UI.Xaml.Controls.StyleSelector);
            _typeTable[95] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode);
            _typeTable[96] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode);
            _typeTable[97] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled);
            _typeTable[98] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings);
            _typeTable[99] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItem);
            _typeTable[100] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase);
            _typeTable[101] = typeof(global::Microsoft.UI.Xaml.Controls.IconElement);
            _typeTable[102] = typeof(global::SampleNavigationHelix.Views.MainWindow);
            _typeTable[103] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[104] = typeof(global::SampleNavigationHelix.ViewModels.MainWindowViewModel);
            _typeTable[105] = typeof(global::SampleNavigationHelix.Views.Page1View);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_Viewport3DX() { return new global::HelixToolkit.WinUI.Viewport3DX(); }
        private object Activate_6_ObservableElement3DCollection() { return new global::HelixToolkit.WinUI.ObservableElement3DCollection(); }
        private object Activate_7_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::HelixToolkit.WinUI.Element3D>(); }
        private object Activate_8_Collection() { return new global::System.Collections.ObjectModel.Collection<global::HelixToolkit.WinUI.Element3D>(); }
        private object Activate_25_InputBindingCollection() { return new global::HelixToolkit.WinUI.InputBindingCollection(); }
        private object Activate_26_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::HelixToolkit.WinUI.InputBinding>(); }
        private object Activate_27_Collection() { return new global::System.Collections.ObjectModel.Collection<global::HelixToolkit.WinUI.InputBinding>(); }
        private object Activate_28_InputBinding() { return new global::HelixToolkit.WinUI.InputBinding(); }
        private object Activate_36_ManipulationBindingCollection() { return new global::HelixToolkit.WinUI.ManipulationBindingCollection(); }
        private object Activate_37_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::HelixToolkit.WinUI.ManipulationBinding>(); }
        private object Activate_38_Collection() { return new global::System.Collections.ObjectModel.Collection<global::HelixToolkit.WinUI.ManipulationBinding>(); }
        private object Activate_39_ManipulationBinding() { return new global::HelixToolkit.WinUI.ManipulationBinding(); }
        private object Activate_54_InputController() { return new global::HelixToolkit.WinUI.InputController(); }
        private object Activate_55_Exception() { return new global::System.Exception(); }
        private object Activate_60_GroupModel3D() { return new global::HelixToolkit.WinUI.GroupModel3D(); }
        private object Activate_65_CustomBox3D() { return new global::SampleNavigationHelix.CustomUIElement.CustomBox3D(); }
        private object Activate_66_BatchedMeshGeometryModel3D() { return new global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D(); }
        private object Activate_75_AmbientLight3D() { return new global::HelixToolkit.WinUI.AmbientLight3D(); }
        private object Activate_78_ItemsModel3D() { return new global::HelixToolkit.WinUI.ItemsModel3D(); }
        private object Activate_82_HelixPageView() { return new global::SampleNavigationHelix.Views.HelixPageView(); }
        private object Activate_85_HelixViewModel() { return new global::SampleNavigationHelix.ViewModels.HelixViewModel(); }
        private object Activate_86_NavigationView() { return new global::Microsoft.UI.Xaml.Controls.NavigationView(); }
        private object Activate_98_NavigationViewTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings(); }
        private object Activate_99_NavigationViewItem() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewItem(); }
        private object Activate_102_MainWindow() { return new global::SampleNavigationHelix.Views.MainWindow(); }
        private object Activate_104_MainWindowViewModel() { return new global::SampleNavigationHelix.ViewModels.MainWindowViewModel(); }
        private object Activate_105_Page1View() { return new global::SampleNavigationHelix.Views.Page1View(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_6_ObservableElement3DCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.WinUI.Element3D>)instance;
            var newItem = (global::HelixToolkit.WinUI.Element3D)item;
            collection.Add(newItem);
        }
        private void VectorAdd_7_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.WinUI.Element3D>)instance;
            var newItem = (global::HelixToolkit.WinUI.Element3D)item;
            collection.Add(newItem);
        }
        private void VectorAdd_8_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.WinUI.Element3D>)instance;
            var newItem = (global::HelixToolkit.WinUI.Element3D)item;
            collection.Add(newItem);
        }
        private void VectorAdd_25_InputBindingCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.WinUI.InputBinding>)instance;
            var newItem = (global::HelixToolkit.WinUI.InputBinding)item;
            collection.Add(newItem);
        }
        private void VectorAdd_26_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.WinUI.InputBinding>)instance;
            var newItem = (global::HelixToolkit.WinUI.InputBinding)item;
            collection.Add(newItem);
        }
        private void VectorAdd_27_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.WinUI.InputBinding>)instance;
            var newItem = (global::HelixToolkit.WinUI.InputBinding)item;
            collection.Add(newItem);
        }
        private void VectorAdd_36_ManipulationBindingCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.WinUI.ManipulationBinding>)instance;
            var newItem = (global::HelixToolkit.WinUI.ManipulationBinding)item;
            collection.Add(newItem);
        }
        private void VectorAdd_37_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.WinUI.ManipulationBinding>)instance;
            var newItem = (global::HelixToolkit.WinUI.ManipulationBinding)item;
            collection.Add(newItem);
        }
        private void VectorAdd_38_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.WinUI.ManipulationBinding>)instance;
            var newItem = (global::HelixToolkit.WinUI.ManipulationBinding)item;
            collection.Add(newItem);
        }
        private void VectorAdd_62_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.WinUI.Element3D>)instance;
            var newItem = (global::HelixToolkit.WinUI.Element3D)item;
            collection.Add(newItem);
        }
        private void VectorAdd_67_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig>)instance;
            var newItem = (global::HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig)item;
            collection.Add(newItem);
        }
        private void VectorAdd_70_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::HelixToolkit.WinUI.Material>)instance;
            var newItem = (global::HelixToolkit.WinUI.Material)item;
            collection.Add(newItem);
        }
        private void VectorAdd_90_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  HelixToolkit.WinUI.Viewport3DX
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_4_Viewport3DX;
                userType.SetContentPropertyName("HelixToolkit.WinUI.Viewport3DX.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("BackgroundColor");
                userType.AddMemberName("CameraMode");
                userType.AddMemberName("CameraRotationMode");
                userType.AddMemberName("FXAALevel");
                userType.AddMemberName("FixedRotationPointEnabled");
                userType.AddMemberName("IsChangeFieldOfViewEnabled");
                userType.AddMemberName("IsInertiaEnabled");
                userType.AddMemberName("IsMoveEnabled");
                userType.AddMemberName("IsPanEnabled");
                userType.AddMemberName("IsRotationEnabled");
                userType.AddMemberName("IsZoomEnabled");
                userType.AddMemberName("PanCursor");
                userType.AddMemberName("RotateAroundMouseDownPoint");
                userType.AddMemberName("RotateCursor");
                userType.AddMemberName("ShowCoordinateSystem");
                userType.AddMemberName("ShowViewCube");
                userType.AddMemberName("ZoomAroundMouseDownPoint");
                userType.AddMemberName("InputBindings");
                userType.AddMemberName("RenderHost");
                userType.AddMemberName("CameraCore");
                userType.AddMemberName("ManipulationBindings");
                userType.AddMemberName("Renderables");
                userType.AddMemberName("D2DRenderables");
                userType.AddMemberName("RenderContext");
                userType.AddMemberName("ViewportRectangle");
                userType.AddMemberName("IsShadowMappingEnabled");
                userType.AddMemberName("EffectsManager");
                userType.AddMemberName("Camera");
                userType.AddMemberName("DefaultCamera");
                userType.AddMemberName("ModelUpDirection");
                userType.AddMemberName("MessageText");
                userType.AddMemberName("CoordinateSystemHorizontalPosition");
                userType.AddMemberName("CoordinateSystemLabelForeground");
                userType.AddMemberName("CoordinateSystemLabelX");
                userType.AddMemberName("CoordinateSystemLabelY");
                userType.AddMemberName("CoordinateSystemLabelZ");
                userType.AddMemberName("CoordinateSystemAxisXColor");
                userType.AddMemberName("CoordinateSystemAxisYColor");
                userType.AddMemberName("CoordinateSystemAxisZColor");
                userType.AddMemberName("CoordinateSystemVerticalPosition");
                userType.AddMemberName("CoordinateSystemSize");
                userType.AddMemberName("ViewCubeTexture");
                userType.AddMemberName("ViewCubeHorizontalPosition");
                userType.AddMemberName("IsViewCubeEdgeClicksEnabled");
                userType.AddMemberName("ViewCubeVerticalPosition");
                userType.AddMemberName("ViewCubeSize");
                userType.AddMemberName("LeftRightRotationSensitivity");
                userType.AddMemberName("LeftRightPanSensitivity");
                userType.AddMemberName("RotationSensitivity");
                userType.AddMemberName("UpDownPanSensitivity");
                userType.AddMemberName("UpDownRotationSensitivity");
                userType.AddMemberName("AllowUpDownRotation");
                userType.AddMemberName("AllowLeftRightRotation");
                userType.AddMemberName("ZoomSensitivity");
                userType.AddMemberName("SpinReleaseTime");
                userType.AddMemberName("FixedRotationPoint");
                userType.AddMemberName("IsTouchRotateEnabled");
                userType.AddMemberName("IsPinchZoomEnabled");
                userType.AddMemberName("PinchZoomAtCenter");
                userType.AddMemberName("IsThreeFingerPanningEnabled");
                userType.AddMemberName("MaximumFieldOfView");
                userType.AddMemberName("MinimumFieldOfView");
                userType.AddMemberName("ZoomCursor");
                userType.AddMemberName("ZoomDistanceLimitFar");
                userType.AddMemberName("ZoomDistanceLimitNear");
                userType.AddMemberName("ZoomRectangleCursor");
                userType.AddMemberName("CameraInertiaFactor");
                userType.AddMemberName("InfiniteSpin");
                userType.AddMemberName("InputController");
                userType.AddMemberName("PageUpDownZoomSensitivity");
                userType.AddMemberName("MoveSensitivity");
                userType.AddMemberName("EnableMouseButtonHitTest");
                userType.AddMemberName("ManualLookAtPoint");
                userType.AddMemberName("EnableRenderFrustum");
                userType.AddMemberName("EnableDeferredRendering");
                userType.AddMemberName("EnableAutoOctreeUpdate");
                userType.AddMemberName("RenderException");
                userType.AddMemberName("FrameRate");
                userType.AddMemberName("OITRenderMode");
                userType.AddMemberName("OITDepthPeelingIteration");
                userType.AddMemberName("OITWeightPower");
                userType.AddMemberName("OITWeightDepthSlope");
                userType.AddMemberName("OITWeightMode");
                userType.AddMemberName("EnableDesignModeRendering");
                userType.AddMemberName("EnableSharedModelMode");
                userType.AddMemberName("SharedModelContainer");
                userType.AddMemberName("ShowCameraInfo");
                userType.AddMemberName("ShowFrameRate");
                userType.AddMemberName("ShowFrameDetails");
                userType.AddMemberName("ShowTriangleCountInfo");
                userType.AddMemberName("RenderDetailOutput");
                userType.AddMemberName("EnableRenderOrder");
                userType.AddMemberName("EnableSSAO");
                userType.AddMemberName("SSAOSamplingRadius");
                userType.AddMemberName("SSAOIntensity");
                userType.AddMemberName("SSAOQuality");
                userType.AddMemberName("MinimumUpdateCount");
                userType.AddMemberName("EnableDpiScale");
                xamlType = userType;
                break;

            case 5:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  HelixToolkit.WinUI.ObservableElement3DCollection
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<HelixToolkit.WinUI.Element3D>"));
                userType.CollectionAdd = VectorAdd_6_ObservableElement3DCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.Collections.ObjectModel.ObservableCollection`1<HelixToolkit.WinUI.Element3D>
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<HelixToolkit.WinUI.Element3D>"));
                userType.Activator = Activate_7_ObservableCollection;
                userType.CollectionAdd = VectorAdd_7_ObservableCollection;
                xamlType = userType;
                break;

            case 8:   //  System.Collections.ObjectModel.Collection`1<HelixToolkit.WinUI.Element3D>
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_Collection;
                userType.CollectionAdd = VectorAdd_8_Collection;
                xamlType = userType;
                break;

            case 9:   //  HelixToolkit.WinUI.Element3D
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.WinUI.Model.Element3DCore"));
                userType.AddMemberName("IsRendering");
                userType.AddMemberName("HxTransform3D");
                userType.AddMemberName("RenderOrder");
                xamlType = userType;
                break;

            case 10:   //  HelixToolkit.WinUI.Model.Element3DCore
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.AddMemberName("GUID");
                userType.AddMemberName("TotalModelMatrix");
                userType.AddMemberName("Visible");
                userType.AddMemberName("IsAttached");
                userType.AddMemberName("SceneNode");
                userType.AddMemberName("Bounds");
                userType.AddMemberName("BoundsWithTransform");
                userType.AddMemberName("BoundsSphere");
                userType.AddMemberName("BoundsSphereWithTransform");
                xamlType = userType;
                break;

            case 11:   //  SharpDX.Matrix
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  System.ValueType
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 13:   //  Int32
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Guid
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  HelixToolkit.SharpDX.Core.Model.Scene.SceneNode
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.SharpDX.Core.DisposeObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  HelixToolkit.SharpDX.Core.DisposeObject
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 17:   //  SharpDX.BoundingBox
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  SharpDX.BoundingSphere
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  Windows.UI.Color
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  HelixToolkit.SharpDX.Core.CameraMode
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Inspect", global::HelixToolkit.SharpDX.Core.CameraMode.Inspect);
                userType.AddEnumValue("WalkAround", global::HelixToolkit.SharpDX.Core.CameraMode.WalkAround);
                userType.AddEnumValue("FixedPosition", global::HelixToolkit.SharpDX.Core.CameraMode.FixedPosition);
                xamlType = userType;
                break;

            case 21:   //  System.Enum
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 22:   //  HelixToolkit.SharpDX.Core.CameraRotationMode
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Turntable", global::HelixToolkit.SharpDX.Core.CameraRotationMode.Turntable);
                userType.AddEnumValue("Turnball", global::HelixToolkit.SharpDX.Core.CameraRotationMode.Turnball);
                userType.AddEnumValue("Trackball", global::HelixToolkit.SharpDX.Core.CameraRotationMode.Trackball);
                xamlType = userType;
                break;

            case 23:   //  HelixToolkit.SharpDX.Core.FXAALevel
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::HelixToolkit.SharpDX.Core.FXAALevel.None);
                userType.AddEnumValue("Low", global::HelixToolkit.SharpDX.Core.FXAALevel.Low);
                userType.AddEnumValue("Medium", global::HelixToolkit.SharpDX.Core.FXAALevel.Medium);
                userType.AddEnumValue("High", global::HelixToolkit.SharpDX.Core.FXAALevel.High);
                userType.AddEnumValue("Ultra", global::HelixToolkit.SharpDX.Core.FXAALevel.Ultra);
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Core.CoreCursorType
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Arrow", global::Windows.UI.Core.CoreCursorType.Arrow);
                userType.AddEnumValue("Cross", global::Windows.UI.Core.CoreCursorType.Cross);
                userType.AddEnumValue("Custom", global::Windows.UI.Core.CoreCursorType.Custom);
                userType.AddEnumValue("Hand", global::Windows.UI.Core.CoreCursorType.Hand);
                userType.AddEnumValue("Help", global::Windows.UI.Core.CoreCursorType.Help);
                userType.AddEnumValue("IBeam", global::Windows.UI.Core.CoreCursorType.IBeam);
                userType.AddEnumValue("SizeAll", global::Windows.UI.Core.CoreCursorType.SizeAll);
                userType.AddEnumValue("SizeNortheastSouthwest", global::Windows.UI.Core.CoreCursorType.SizeNortheastSouthwest);
                userType.AddEnumValue("SizeNorthSouth", global::Windows.UI.Core.CoreCursorType.SizeNorthSouth);
                userType.AddEnumValue("SizeNorthwestSoutheast", global::Windows.UI.Core.CoreCursorType.SizeNorthwestSoutheast);
                userType.AddEnumValue("SizeWestEast", global::Windows.UI.Core.CoreCursorType.SizeWestEast);
                userType.AddEnumValue("UniversalNo", global::Windows.UI.Core.CoreCursorType.UniversalNo);
                userType.AddEnumValue("UpArrow", global::Windows.UI.Core.CoreCursorType.UpArrow);
                userType.AddEnumValue("Wait", global::Windows.UI.Core.CoreCursorType.Wait);
                userType.AddEnumValue("Pin", global::Windows.UI.Core.CoreCursorType.Pin);
                userType.AddEnumValue("Person", global::Windows.UI.Core.CoreCursorType.Person);
                xamlType = userType;
                break;

            case 25:   //  HelixToolkit.WinUI.InputBindingCollection
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<HelixToolkit.WinUI.InputBinding>"));
                userType.CollectionAdd = VectorAdd_25_InputBindingCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  System.Collections.ObjectModel.ObservableCollection`1<HelixToolkit.WinUI.InputBinding>
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<HelixToolkit.WinUI.InputBinding>"));
                userType.Activator = Activate_26_ObservableCollection;
                userType.CollectionAdd = VectorAdd_26_ObservableCollection;
                xamlType = userType;
                break;

            case 27:   //  System.Collections.ObjectModel.Collection`1<HelixToolkit.WinUI.InputBinding>
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_27_Collection;
                userType.CollectionAdd = VectorAdd_27_Collection;
                xamlType = userType;
                break;

            case 28:   //  HelixToolkit.WinUI.InputBinding
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_28_InputBinding;
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("CommandTarget");
                userType.AddMemberName("Gesture");
                xamlType = userType;
                break;

            case 29:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  System.Windows.Input.ICommand
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 31:   //  Microsoft.UI.Xaml.UIElement
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  HelixToolkit.WinUI.InputGesture
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 33:   //  HelixToolkit.SharpDX.Core.IRenderHost
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  HelixToolkit.SharpDX.Core.Cameras.CameraCore
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.SharpDX.Core.Model.ObservableObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  HelixToolkit.SharpDX.Core.Model.ObservableObject
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 36:   //  HelixToolkit.WinUI.ManipulationBindingCollection
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<HelixToolkit.WinUI.ManipulationBinding>"));
                userType.CollectionAdd = VectorAdd_36_ManipulationBindingCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  System.Collections.ObjectModel.ObservableCollection`1<HelixToolkit.WinUI.ManipulationBinding>
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<HelixToolkit.WinUI.ManipulationBinding>"));
                userType.Activator = Activate_37_ObservableCollection;
                userType.CollectionAdd = VectorAdd_37_ObservableCollection;
                xamlType = userType;
                break;

            case 38:   //  System.Collections.ObjectModel.Collection`1<HelixToolkit.WinUI.ManipulationBinding>
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_38_Collection;
                userType.CollectionAdd = VectorAdd_38_Collection;
                xamlType = userType;
                break;

            case 39:   //  HelixToolkit.WinUI.ManipulationBinding
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_39_ManipulationBinding;
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("CommandTarget");
                userType.AddMemberName("FingerCount");
                userType.AddMemberName("Gesture");
                xamlType = userType;
                break;

            case 40:   //  HelixToolkit.WinUI.ViewportCommand
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CreateFromStringMethod = global::HelixToolkit.WinUI.ViewportCommand.CreateFromString;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  HelixToolkit.WinUI.ManipulationGesture
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.WinUI.InputGesture"));
                userType.CreateFromStringMethod = global::HelixToolkit.WinUI.ManipulationGesture.CreateFromString;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 42:   //  System.Collections.Generic.IEnumerable`1<HelixToolkit.SharpDX.Core.Model.Scene.SceneNode>
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 43:   //  System.Collections.Generic.IEnumerable`1<HelixToolkit.SharpDX.Core.Model.Scene2D.SceneNode2D>
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 44:   //  HelixToolkit.SharpDX.Core.RenderContext
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.SharpDX.Core.DisposeObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 45:   //  SharpDX.Rectangle
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 46:   //  HelixToolkit.SharpDX.Core.IEffectsManager
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 47:   //  HelixToolkit.WinUI.Camera
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 48:   //  HelixToolkit.WinUI.ProjectionCamera
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.WinUI.Camera"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 49:   //  SharpDX.Vector3
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 50:   //  String
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 51:   //  Double
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 52:   //  System.IO.Stream
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MarshalByRefObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 53:   //  System.MarshalByRefObject
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 54:   //  HelixToolkit.WinUI.InputController
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 55:   //  System.Exception
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 56:   //  HelixToolkit.SharpDX.Core.OITRenderType
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::HelixToolkit.SharpDX.Core.OITRenderType.None);
                userType.AddEnumValue("SinglePassWeighted", global::HelixToolkit.SharpDX.Core.OITRenderType.SinglePassWeighted);
                userType.AddEnumValue("DepthPeeling", global::HelixToolkit.SharpDX.Core.OITRenderType.DepthPeeling);
                xamlType = userType;
                break;

            case 57:   //  HelixToolkit.SharpDX.Core.OITWeightMode
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Linear0", global::HelixToolkit.SharpDX.Core.OITWeightMode.Linear0);
                userType.AddEnumValue("Linear1", global::HelixToolkit.SharpDX.Core.OITWeightMode.Linear1);
                userType.AddEnumValue("Linear2", global::HelixToolkit.SharpDX.Core.OITWeightMode.Linear2);
                userType.AddEnumValue("NonLinear", global::HelixToolkit.SharpDX.Core.OITWeightMode.NonLinear);
                xamlType = userType;
                break;

            case 58:   //  HelixToolkit.SharpDX.Core.IModelContainer
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 59:   //  HelixToolkit.SharpDX.Core.SSAOQuality
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("High", global::HelixToolkit.SharpDX.Core.SSAOQuality.High);
                userType.AddEnumValue("Low", global::HelixToolkit.SharpDX.Core.SSAOQuality.Low);
                xamlType = userType;
                break;

            case 60:   //  HelixToolkit.WinUI.GroupModel3D
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.WinUI.GroupElement3D"));
                userType.Activator = Activate_60_GroupModel3D;
                userType.SetContentPropertyName("HelixToolkit.WinUI.GroupElement3D.Children");
                xamlType = userType;
                break;

            case 61:   //  HelixToolkit.WinUI.GroupElement3D
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.WinUI.Element3D"));
                userType.SetContentPropertyName("HelixToolkit.WinUI.GroupElement3D.Children");
                userType.AddMemberName("Children");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("OctreeManager");
                userType.AddMemberName("AlwaysHittable");
                userType.AddMemberName("Items");
                xamlType = userType;
                break;

            case 62:   //  System.Collections.Generic.IList`1<HelixToolkit.WinUI.Element3D>
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_62_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 63:   //  HelixToolkit.WinUI.IOctreeManagerWrapper
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 64:   //  Microsoft.UI.Xaml.Controls.ItemCollection
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 65:   //  SampleNavigationHelix.CustomUIElement.CustomBox3D
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D"));
                userType.Activator = Activate_65_CustomBox3D;
                userType.AddMemberName("PosX");
                userType.AddMemberName("PosY");
                userType.AddMemberName("PosZ");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 66:   //  HelixToolkit.WinUI.BatchedMeshGeometryModel3D
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.WinUI.Element3D"));
                userType.Activator = Activate_66_BatchedMeshGeometryModel3D;
                userType.AddMemberName("BatchedGeometries");
                userType.AddMemberName("BatchedMaterials");
                userType.AddMemberName("PostEffects");
                userType.AddMemberName("IsThrowingShadow");
                userType.AddMemberName("DepthBias");
                userType.AddMemberName("SlopeScaledDepthBias");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("IsMultisampleEnabled");
                userType.AddMemberName("FillMode");
                userType.AddMemberName("IsScissorEnabled");
                userType.AddMemberName("IsDepthClipEnabled");
                userType.AddMemberName("EnableViewFrustumCheck");
                userType.AddMemberName("Material");
                userType.AddMemberName("IsTransparent");
                userType.AddMemberName("RenderWireframe");
                userType.AddMemberName("WireframeColor");
                userType.AddMemberName("FrontCounterClockwise");
                userType.AddMemberName("CullMode");
                userType.AddMemberName("InvertNormal");
                userType.AddMemberName("AlwaysHittable");
                xamlType = userType;
                break;

            case 67:   //  System.Collections.Generic.IList`1<HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig>
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_67_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 68:   //  HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("Geometry");
                userType.AddMemberName("ModelTransform");
                userType.AddMemberName("MaterialIndex");
                xamlType = userType;
                break;

            case 69:   //  HelixToolkit.SharpDX.Core.Geometry3D
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.SharpDX.Core.Model.ObservableObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 70:   //  System.Collections.Generic.IList`1<HelixToolkit.WinUI.Material>
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_70_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 71:   //  HelixToolkit.WinUI.Material
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.AddMemberName("Core");
                userType.AddMemberName("Name");
                xamlType = userType;
                break;

            case 72:   //  HelixToolkit.SharpDX.Core.Model.MaterialCore
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.SharpDX.Core.Model.ObservableObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 73:   //  SharpDX.Direct3D11.FillMode
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Wireframe", global::SharpDX.Direct3D11.FillMode.Wireframe);
                userType.AddEnumValue("Solid", global::SharpDX.Direct3D11.FillMode.Solid);
                xamlType = userType;
                break;

            case 74:   //  SharpDX.Direct3D11.CullMode
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::SharpDX.Direct3D11.CullMode.None);
                userType.AddEnumValue("Front", global::SharpDX.Direct3D11.CullMode.Front);
                userType.AddEnumValue("Back", global::SharpDX.Direct3D11.CullMode.Back);
                xamlType = userType;
                break;

            case 75:   //  HelixToolkit.WinUI.AmbientLight3D
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.WinUI.Light3D"));
                userType.Activator = Activate_75_AmbientLight3D;
                xamlType = userType;
                break;

            case 76:   //  HelixToolkit.WinUI.Light3D
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.WinUI.Element3D"));
                userType.AddMemberName("Color");
                userType.AddMemberName("LightType");
                xamlType = userType;
                break;

            case 77:   //  HelixToolkit.SharpDX.Core.LightType
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Ambient", global::HelixToolkit.SharpDX.Core.LightType.Ambient);
                userType.AddEnumValue("Directional", global::HelixToolkit.SharpDX.Core.LightType.Directional);
                userType.AddEnumValue("Point", global::HelixToolkit.SharpDX.Core.LightType.Point);
                userType.AddEnumValue("Spot", global::HelixToolkit.SharpDX.Core.LightType.Spot);
                userType.AddEnumValue("ThreePoint", global::HelixToolkit.SharpDX.Core.LightType.ThreePoint);
                userType.AddEnumValue("None", global::HelixToolkit.SharpDX.Core.LightType.None);
                xamlType = userType;
                break;

            case 78:   //  HelixToolkit.WinUI.ItemsModel3D
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("HelixToolkit.WinUI.Element3D"));
                userType.Activator = Activate_78_ItemsModel3D;
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("ItemTemplateSelector");
                userType.AddMemberName("OctreeManager");
                userType.AddMemberName("AlwaysHittable");
                userType.AddMemberName("Children");
                userType.AddMemberName("Items");
                xamlType = userType;
                break;

            case 79:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 80:   //  System.Collections.IEnumerable
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 81:   //  Microsoft.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 82:   //  SampleNavigationHelix.Views.HelixPageView
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_82_HelixPageView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 83:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 84:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 85:   //  SampleNavigationHelix.ViewModels.HelixViewModel
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 86:   //  Microsoft.UI.Xaml.Controls.NavigationView
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_86_NavigationView;
                userType.AddMemberName("AlwaysShowHeader");
                userType.AddMemberName("CompactModeThresholdWidth");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("ExpandedModeThresholdWidth");
                userType.AddMemberName("IsBackButtonVisible");
                userType.AddMemberName("IsBackEnabled");
                userType.AddMemberName("IsSettingsVisible");
                userType.AddMemberName("OpenPaneLength");
                userType.AddMemberName("PaneTitle");
                userType.AddMemberName("SelectionFollowsFocus");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("AutoSuggestBox");
                userType.AddMemberName("ContentOverlay");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("FooterMenuItems");
                userType.AddMemberName("FooterMenuItemsSource");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("IsPaneOpen");
                userType.AddMemberName("IsPaneToggleButtonVisible");
                userType.AddMemberName("IsPaneVisible");
                userType.AddMemberName("IsTitleBarAutoPaddingEnabled");
                userType.AddMemberName("MenuItemContainerStyle");
                userType.AddMemberName("MenuItemContainerStyleSelector");
                userType.AddMemberName("MenuItemTemplate");
                userType.AddMemberName("MenuItemTemplateSelector");
                userType.AddMemberName("MenuItemsSource");
                userType.AddMemberName("OverflowLabelMode");
                userType.AddMemberName("PaneCustomContent");
                userType.AddMemberName("PaneDisplayMode");
                userType.AddMemberName("PaneFooter");
                userType.AddMemberName("PaneHeader");
                userType.AddMemberName("PaneToggleButtonStyle");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("SettingsItem");
                userType.AddMemberName("ShoulderNavigationEnabled");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 87:   //  Microsoft.UI.Xaml.Controls.ContentControl
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 88:   //  Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Collapsed", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Collapsed);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Visible);
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Auto);
                xamlType = userType;
                break;

            case 89:   //  Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Disabled);
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Enabled);
                xamlType = userType;
                break;

            case 90:   //  System.Collections.Generic.IList`1<Object>
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_90_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 91:   //  Microsoft.UI.Xaml.Controls.AutoSuggestBox
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 92:   //  Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Minimal", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Minimal);
                userType.AddEnumValue("Compact", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Compact);
                userType.AddEnumValue("Expanded", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Expanded);
                xamlType = userType;
                break;

            case 93:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 94:   //  Microsoft.UI.Xaml.Controls.StyleSelector
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 95:   //  Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("MoreLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.MoreLabel);
                userType.AddEnumValue("NoLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.NoLabel);
                xamlType = userType;
                break;

            case 96:   //  Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Auto);
                userType.AddEnumValue("Left", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Left);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Top);
                userType.AddEnumValue("LeftCompact", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftCompact);
                userType.AddEnumValue("LeftMinimal", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftMinimal);
                xamlType = userType;
                break;

            case 97:   //  Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("WhenSelectionFollowsFocus", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.WhenSelectionFollowsFocus);
                userType.AddEnumValue("Always", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Always);
                userType.AddEnumValue("Never", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Never);
                xamlType = userType;
                break;

            case 98:   //  Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 99:   //  Microsoft.UI.Xaml.Controls.NavigationViewItem
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"));
                userType.Activator = Activate_99_NavigationViewItem;
                userType.AddMemberName("Icon");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsChildSelected");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("MenuItemsSource");
                userType.AddMemberName("SelectsOnInvoked");
                xamlType = userType;
                break;

            case 100:   //  Microsoft.UI.Xaml.Controls.NavigationViewItemBase
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.AddMemberName("IsSelected");
                xamlType = userType;
                break;

            case 101:   //  Microsoft.UI.Xaml.Controls.IconElement
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 102:   //  SampleNavigationHelix.Views.MainWindow
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_102_MainWindow;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 103:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 104:   //  SampleNavigationHelix.ViewModels.MainWindowViewModel
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 105:   //  SampleNavigationHelix.Views.Page1View
                userType = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_105_Page1View;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::HelixToolkit.WinUI.HelixToolkit_WinUI_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_Viewport3DX_Items(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.Items;
        }
        private object get_2_Element3D_IsRendering(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Element3D)instance;
            return that.IsRendering;
        }
        private void set_2_Element3D_IsRendering(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Element3D)instance;
            that.IsRendering = (global::System.Boolean)Value;
        }
        private object get_3_Element3D_HxTransform3D(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Element3D)instance;
            return that.HxTransform3D;
        }
        private void set_3_Element3D_HxTransform3D(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Element3D)instance;
            that.HxTransform3D = (global::SharpDX.Matrix)Value;
        }
        private object get_4_Element3D_RenderOrder(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Element3D)instance;
            return that.RenderOrder;
        }
        private void set_4_Element3D_RenderOrder(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Element3D)instance;
            that.RenderOrder = (global::System.Int32)Value;
        }
        private object get_5_Element3DCore_GUID(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Model.Element3DCore)instance;
            return that.GUID;
        }
        private object get_6_Element3DCore_TotalModelMatrix(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Model.Element3DCore)instance;
            return that.TotalModelMatrix;
        }
        private object get_7_Element3DCore_Visible(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Model.Element3DCore)instance;
            return that.Visible;
        }
        private object get_8_Element3DCore_IsAttached(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Model.Element3DCore)instance;
            return that.IsAttached;
        }
        private object get_9_Element3DCore_SceneNode(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Model.Element3DCore)instance;
            return that.SceneNode;
        }
        private object get_10_Element3DCore_Bounds(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Model.Element3DCore)instance;
            return that.Bounds;
        }
        private object get_11_Element3DCore_BoundsWithTransform(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Model.Element3DCore)instance;
            return that.BoundsWithTransform;
        }
        private object get_12_Element3DCore_BoundsSphere(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Model.Element3DCore)instance;
            return that.BoundsSphere;
        }
        private object get_13_Element3DCore_BoundsSphereWithTransform(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Model.Element3DCore)instance;
            return that.BoundsSphereWithTransform;
        }
        private object get_14_Viewport3DX_BackgroundColor(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.BackgroundColor;
        }
        private void set_14_Viewport3DX_BackgroundColor(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.BackgroundColor = (global::Windows.UI.Color)Value;
        }
        private object get_15_Viewport3DX_CameraMode(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CameraMode;
        }
        private void set_15_Viewport3DX_CameraMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CameraMode = (global::HelixToolkit.SharpDX.Core.CameraMode)Value;
        }
        private object get_16_Viewport3DX_CameraRotationMode(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CameraRotationMode;
        }
        private void set_16_Viewport3DX_CameraRotationMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CameraRotationMode = (global::HelixToolkit.SharpDX.Core.CameraRotationMode)Value;
        }
        private object get_17_Viewport3DX_FXAALevel(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.FXAALevel;
        }
        private void set_17_Viewport3DX_FXAALevel(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.FXAALevel = (global::HelixToolkit.SharpDX.Core.FXAALevel)Value;
        }
        private object get_18_Viewport3DX_FixedRotationPointEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.FixedRotationPointEnabled;
        }
        private void set_18_Viewport3DX_FixedRotationPointEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.FixedRotationPointEnabled = (global::System.Boolean)Value;
        }
        private object get_19_Viewport3DX_IsChangeFieldOfViewEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.IsChangeFieldOfViewEnabled;
        }
        private void set_19_Viewport3DX_IsChangeFieldOfViewEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.IsChangeFieldOfViewEnabled = (global::System.Boolean)Value;
        }
        private object get_20_Viewport3DX_IsInertiaEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.IsInertiaEnabled;
        }
        private void set_20_Viewport3DX_IsInertiaEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.IsInertiaEnabled = (global::System.Boolean)Value;
        }
        private object get_21_Viewport3DX_IsMoveEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.IsMoveEnabled;
        }
        private void set_21_Viewport3DX_IsMoveEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.IsMoveEnabled = (global::System.Boolean)Value;
        }
        private object get_22_Viewport3DX_IsPanEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.IsPanEnabled;
        }
        private void set_22_Viewport3DX_IsPanEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.IsPanEnabled = (global::System.Boolean)Value;
        }
        private object get_23_Viewport3DX_IsRotationEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.IsRotationEnabled;
        }
        private void set_23_Viewport3DX_IsRotationEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.IsRotationEnabled = (global::System.Boolean)Value;
        }
        private object get_24_Viewport3DX_IsZoomEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.IsZoomEnabled;
        }
        private void set_24_Viewport3DX_IsZoomEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.IsZoomEnabled = (global::System.Boolean)Value;
        }
        private object get_25_Viewport3DX_PanCursor(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.PanCursor;
        }
        private void set_25_Viewport3DX_PanCursor(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.PanCursor = (global::Windows.UI.Core.CoreCursorType)Value;
        }
        private object get_26_Viewport3DX_RotateAroundMouseDownPoint(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.RotateAroundMouseDownPoint;
        }
        private void set_26_Viewport3DX_RotateAroundMouseDownPoint(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.RotateAroundMouseDownPoint = (global::System.Boolean)Value;
        }
        private object get_27_Viewport3DX_RotateCursor(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.RotateCursor;
        }
        private void set_27_Viewport3DX_RotateCursor(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.RotateCursor = (global::Windows.UI.Core.CoreCursorType)Value;
        }
        private object get_28_Viewport3DX_ShowCoordinateSystem(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ShowCoordinateSystem;
        }
        private void set_28_Viewport3DX_ShowCoordinateSystem(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ShowCoordinateSystem = (global::System.Boolean)Value;
        }
        private object get_29_Viewport3DX_ShowViewCube(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ShowViewCube;
        }
        private void set_29_Viewport3DX_ShowViewCube(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ShowViewCube = (global::System.Boolean)Value;
        }
        private object get_30_Viewport3DX_ZoomAroundMouseDownPoint(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ZoomAroundMouseDownPoint;
        }
        private void set_30_Viewport3DX_ZoomAroundMouseDownPoint(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ZoomAroundMouseDownPoint = (global::System.Boolean)Value;
        }
        private object get_31_Viewport3DX_InputBindings(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.InputBindings;
        }
        private object get_32_InputBinding_Command(object instance)
        {
            var that = (global::HelixToolkit.WinUI.InputBinding)instance;
            return that.Command;
        }
        private void set_32_InputBinding_Command(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.InputBinding)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_33_InputBinding_CommandParameter(object instance)
        {
            var that = (global::HelixToolkit.WinUI.InputBinding)instance;
            return that.CommandParameter;
        }
        private void set_33_InputBinding_CommandParameter(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.InputBinding)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_34_InputBinding_CommandTarget(object instance)
        {
            var that = (global::HelixToolkit.WinUI.InputBinding)instance;
            return that.CommandTarget;
        }
        private void set_34_InputBinding_CommandTarget(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.InputBinding)instance;
            that.CommandTarget = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_35_InputBinding_Gesture(object instance)
        {
            var that = (global::HelixToolkit.WinUI.InputBinding)instance;
            return that.Gesture;
        }
        private void set_35_InputBinding_Gesture(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.InputBinding)instance;
            that.Gesture = (global::HelixToolkit.WinUI.InputGesture)Value;
        }
        private object get_36_Viewport3DX_RenderHost(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.RenderHost;
        }
        private object get_37_Viewport3DX_CameraCore(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CameraCore;
        }
        private object get_38_Viewport3DX_ManipulationBindings(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ManipulationBindings;
        }
        private object get_39_ManipulationBinding_Command(object instance)
        {
            var that = (global::HelixToolkit.WinUI.ManipulationBinding)instance;
            return that.Command;
        }
        private void set_39_ManipulationBinding_Command(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.ManipulationBinding)instance;
            that.Command = (global::HelixToolkit.WinUI.ViewportCommand)Value;
        }
        private object get_40_ManipulationBinding_CommandParameter(object instance)
        {
            var that = (global::HelixToolkit.WinUI.ManipulationBinding)instance;
            return that.CommandParameter;
        }
        private void set_40_ManipulationBinding_CommandParameter(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.ManipulationBinding)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_41_ManipulationBinding_CommandTarget(object instance)
        {
            var that = (global::HelixToolkit.WinUI.ManipulationBinding)instance;
            return that.CommandTarget;
        }
        private void set_41_ManipulationBinding_CommandTarget(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.ManipulationBinding)instance;
            that.CommandTarget = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_42_ManipulationBinding_FingerCount(object instance)
        {
            var that = (global::HelixToolkit.WinUI.ManipulationBinding)instance;
            return that.FingerCount;
        }
        private object get_43_ManipulationBinding_Gesture(object instance)
        {
            var that = (global::HelixToolkit.WinUI.ManipulationBinding)instance;
            return that.Gesture;
        }
        private void set_43_ManipulationBinding_Gesture(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.ManipulationBinding)instance;
            that.Gesture = (global::HelixToolkit.WinUI.ManipulationGesture)Value;
        }
        private object get_44_Viewport3DX_Renderables(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.Renderables;
        }
        private object get_45_Viewport3DX_D2DRenderables(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.D2DRenderables;
        }
        private object get_46_Viewport3DX_RenderContext(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.RenderContext;
        }
        private object get_47_Viewport3DX_ViewportRectangle(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ViewportRectangle;
        }
        private object get_48_Viewport3DX_IsShadowMappingEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.IsShadowMappingEnabled;
        }
        private void set_48_Viewport3DX_IsShadowMappingEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.IsShadowMappingEnabled = (global::System.Boolean)Value;
        }
        private object get_49_Viewport3DX_EffectsManager(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.EffectsManager;
        }
        private void set_49_Viewport3DX_EffectsManager(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.EffectsManager = (global::HelixToolkit.SharpDX.Core.IEffectsManager)Value;
        }
        private object get_50_Viewport3DX_Camera(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.Camera;
        }
        private void set_50_Viewport3DX_Camera(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.Camera = (global::HelixToolkit.WinUI.Camera)Value;
        }
        private object get_51_Viewport3DX_DefaultCamera(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.DefaultCamera;
        }
        private void set_51_Viewport3DX_DefaultCamera(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.DefaultCamera = (global::HelixToolkit.WinUI.ProjectionCamera)Value;
        }
        private object get_52_Viewport3DX_ModelUpDirection(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ModelUpDirection;
        }
        private void set_52_Viewport3DX_ModelUpDirection(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ModelUpDirection = (global::SharpDX.Vector3)Value;
        }
        private object get_53_Viewport3DX_MessageText(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.MessageText;
        }
        private void set_53_Viewport3DX_MessageText(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.MessageText = (global::System.String)Value;
        }
        private object get_54_Viewport3DX_CoordinateSystemHorizontalPosition(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CoordinateSystemHorizontalPosition;
        }
        private void set_54_Viewport3DX_CoordinateSystemHorizontalPosition(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CoordinateSystemHorizontalPosition = (global::System.Double)Value;
        }
        private object get_55_Viewport3DX_CoordinateSystemLabelForeground(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CoordinateSystemLabelForeground;
        }
        private void set_55_Viewport3DX_CoordinateSystemLabelForeground(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CoordinateSystemLabelForeground = (global::Windows.UI.Color)Value;
        }
        private object get_56_Viewport3DX_CoordinateSystemLabelX(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CoordinateSystemLabelX;
        }
        private void set_56_Viewport3DX_CoordinateSystemLabelX(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CoordinateSystemLabelX = (global::System.String)Value;
        }
        private object get_57_Viewport3DX_CoordinateSystemLabelY(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CoordinateSystemLabelY;
        }
        private void set_57_Viewport3DX_CoordinateSystemLabelY(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CoordinateSystemLabelY = (global::System.String)Value;
        }
        private object get_58_Viewport3DX_CoordinateSystemLabelZ(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CoordinateSystemLabelZ;
        }
        private void set_58_Viewport3DX_CoordinateSystemLabelZ(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CoordinateSystemLabelZ = (global::System.String)Value;
        }
        private object get_59_Viewport3DX_CoordinateSystemAxisXColor(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CoordinateSystemAxisXColor;
        }
        private void set_59_Viewport3DX_CoordinateSystemAxisXColor(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CoordinateSystemAxisXColor = (global::Windows.UI.Color)Value;
        }
        private object get_60_Viewport3DX_CoordinateSystemAxisYColor(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CoordinateSystemAxisYColor;
        }
        private void set_60_Viewport3DX_CoordinateSystemAxisYColor(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CoordinateSystemAxisYColor = (global::Windows.UI.Color)Value;
        }
        private object get_61_Viewport3DX_CoordinateSystemAxisZColor(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CoordinateSystemAxisZColor;
        }
        private void set_61_Viewport3DX_CoordinateSystemAxisZColor(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CoordinateSystemAxisZColor = (global::Windows.UI.Color)Value;
        }
        private object get_62_Viewport3DX_CoordinateSystemVerticalPosition(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CoordinateSystemVerticalPosition;
        }
        private void set_62_Viewport3DX_CoordinateSystemVerticalPosition(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CoordinateSystemVerticalPosition = (global::System.Double)Value;
        }
        private object get_63_Viewport3DX_CoordinateSystemSize(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CoordinateSystemSize;
        }
        private void set_63_Viewport3DX_CoordinateSystemSize(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CoordinateSystemSize = (global::System.Double)Value;
        }
        private object get_64_Viewport3DX_ViewCubeTexture(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ViewCubeTexture;
        }
        private void set_64_Viewport3DX_ViewCubeTexture(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ViewCubeTexture = (global::System.IO.Stream)Value;
        }
        private object get_65_Viewport3DX_ViewCubeHorizontalPosition(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ViewCubeHorizontalPosition;
        }
        private void set_65_Viewport3DX_ViewCubeHorizontalPosition(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ViewCubeHorizontalPosition = (global::System.Double)Value;
        }
        private object get_66_Viewport3DX_IsViewCubeEdgeClicksEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.IsViewCubeEdgeClicksEnabled;
        }
        private void set_66_Viewport3DX_IsViewCubeEdgeClicksEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.IsViewCubeEdgeClicksEnabled = (global::System.Boolean)Value;
        }
        private object get_67_Viewport3DX_ViewCubeVerticalPosition(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ViewCubeVerticalPosition;
        }
        private void set_67_Viewport3DX_ViewCubeVerticalPosition(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ViewCubeVerticalPosition = (global::System.Double)Value;
        }
        private object get_68_Viewport3DX_ViewCubeSize(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ViewCubeSize;
        }
        private void set_68_Viewport3DX_ViewCubeSize(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ViewCubeSize = (global::System.Double)Value;
        }
        private object get_69_Viewport3DX_LeftRightRotationSensitivity(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.LeftRightRotationSensitivity;
        }
        private void set_69_Viewport3DX_LeftRightRotationSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.LeftRightRotationSensitivity = (global::System.Double)Value;
        }
        private object get_70_Viewport3DX_LeftRightPanSensitivity(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.LeftRightPanSensitivity;
        }
        private void set_70_Viewport3DX_LeftRightPanSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.LeftRightPanSensitivity = (global::System.Double)Value;
        }
        private object get_71_Viewport3DX_RotationSensitivity(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.RotationSensitivity;
        }
        private void set_71_Viewport3DX_RotationSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.RotationSensitivity = (global::System.Double)Value;
        }
        private object get_72_Viewport3DX_UpDownPanSensitivity(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.UpDownPanSensitivity;
        }
        private void set_72_Viewport3DX_UpDownPanSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.UpDownPanSensitivity = (global::System.Double)Value;
        }
        private object get_73_Viewport3DX_UpDownRotationSensitivity(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.UpDownRotationSensitivity;
        }
        private void set_73_Viewport3DX_UpDownRotationSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.UpDownRotationSensitivity = (global::System.Double)Value;
        }
        private object get_74_Viewport3DX_AllowUpDownRotation(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.AllowUpDownRotation;
        }
        private void set_74_Viewport3DX_AllowUpDownRotation(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.AllowUpDownRotation = (global::System.Boolean)Value;
        }
        private object get_75_Viewport3DX_AllowLeftRightRotation(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.AllowLeftRightRotation;
        }
        private void set_75_Viewport3DX_AllowLeftRightRotation(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.AllowLeftRightRotation = (global::System.Boolean)Value;
        }
        private object get_76_Viewport3DX_ZoomSensitivity(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ZoomSensitivity;
        }
        private void set_76_Viewport3DX_ZoomSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ZoomSensitivity = (global::System.Double)Value;
        }
        private object get_77_Viewport3DX_SpinReleaseTime(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.SpinReleaseTime;
        }
        private void set_77_Viewport3DX_SpinReleaseTime(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.SpinReleaseTime = (global::System.Int32)Value;
        }
        private object get_78_Viewport3DX_FixedRotationPoint(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.FixedRotationPoint;
        }
        private void set_78_Viewport3DX_FixedRotationPoint(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.FixedRotationPoint = (global::SharpDX.Vector3)Value;
        }
        private object get_79_Viewport3DX_IsTouchRotateEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.IsTouchRotateEnabled;
        }
        private void set_79_Viewport3DX_IsTouchRotateEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.IsTouchRotateEnabled = (global::System.Boolean)Value;
        }
        private object get_80_Viewport3DX_IsPinchZoomEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.IsPinchZoomEnabled;
        }
        private void set_80_Viewport3DX_IsPinchZoomEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.IsPinchZoomEnabled = (global::System.Boolean)Value;
        }
        private object get_81_Viewport3DX_PinchZoomAtCenter(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.PinchZoomAtCenter;
        }
        private void set_81_Viewport3DX_PinchZoomAtCenter(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.PinchZoomAtCenter = (global::System.Boolean)Value;
        }
        private object get_82_Viewport3DX_IsThreeFingerPanningEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.IsThreeFingerPanningEnabled;
        }
        private void set_82_Viewport3DX_IsThreeFingerPanningEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.IsThreeFingerPanningEnabled = (global::System.Boolean)Value;
        }
        private object get_83_Viewport3DX_MaximumFieldOfView(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.MaximumFieldOfView;
        }
        private void set_83_Viewport3DX_MaximumFieldOfView(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.MaximumFieldOfView = (global::System.Double)Value;
        }
        private object get_84_Viewport3DX_MinimumFieldOfView(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.MinimumFieldOfView;
        }
        private void set_84_Viewport3DX_MinimumFieldOfView(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.MinimumFieldOfView = (global::System.Double)Value;
        }
        private object get_85_Viewport3DX_ZoomCursor(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ZoomCursor;
        }
        private void set_85_Viewport3DX_ZoomCursor(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ZoomCursor = (global::Windows.UI.Core.CoreCursorType)Value;
        }
        private object get_86_Viewport3DX_ZoomDistanceLimitFar(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ZoomDistanceLimitFar;
        }
        private void set_86_Viewport3DX_ZoomDistanceLimitFar(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ZoomDistanceLimitFar = (global::System.Double)Value;
        }
        private object get_87_Viewport3DX_ZoomDistanceLimitNear(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ZoomDistanceLimitNear;
        }
        private void set_87_Viewport3DX_ZoomDistanceLimitNear(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ZoomDistanceLimitNear = (global::System.Double)Value;
        }
        private object get_88_Viewport3DX_ZoomRectangleCursor(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ZoomRectangleCursor;
        }
        private void set_88_Viewport3DX_ZoomRectangleCursor(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ZoomRectangleCursor = (global::Windows.UI.Core.CoreCursorType)Value;
        }
        private object get_89_Viewport3DX_CameraInertiaFactor(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.CameraInertiaFactor;
        }
        private void set_89_Viewport3DX_CameraInertiaFactor(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.CameraInertiaFactor = (global::System.Double)Value;
        }
        private object get_90_Viewport3DX_InfiniteSpin(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.InfiniteSpin;
        }
        private void set_90_Viewport3DX_InfiniteSpin(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.InfiniteSpin = (global::System.Boolean)Value;
        }
        private object get_91_Viewport3DX_InputController(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.InputController;
        }
        private void set_91_Viewport3DX_InputController(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.InputController = (global::HelixToolkit.WinUI.InputController)Value;
        }
        private object get_92_Viewport3DX_PageUpDownZoomSensitivity(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.PageUpDownZoomSensitivity;
        }
        private void set_92_Viewport3DX_PageUpDownZoomSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.PageUpDownZoomSensitivity = (global::System.Double)Value;
        }
        private object get_93_Viewport3DX_MoveSensitivity(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.MoveSensitivity;
        }
        private void set_93_Viewport3DX_MoveSensitivity(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.MoveSensitivity = (global::System.Double)Value;
        }
        private object get_94_Viewport3DX_EnableMouseButtonHitTest(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.EnableMouseButtonHitTest;
        }
        private void set_94_Viewport3DX_EnableMouseButtonHitTest(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.EnableMouseButtonHitTest = (global::System.Boolean)Value;
        }
        private object get_95_Viewport3DX_ManualLookAtPoint(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ManualLookAtPoint;
        }
        private void set_95_Viewport3DX_ManualLookAtPoint(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ManualLookAtPoint = (global::SharpDX.Vector3)Value;
        }
        private object get_96_Viewport3DX_EnableRenderFrustum(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.EnableRenderFrustum;
        }
        private void set_96_Viewport3DX_EnableRenderFrustum(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.EnableRenderFrustum = (global::System.Boolean)Value;
        }
        private object get_97_Viewport3DX_EnableDeferredRendering(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.EnableDeferredRendering;
        }
        private void set_97_Viewport3DX_EnableDeferredRendering(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.EnableDeferredRendering = (global::System.Boolean)Value;
        }
        private object get_98_Viewport3DX_EnableAutoOctreeUpdate(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.EnableAutoOctreeUpdate;
        }
        private void set_98_Viewport3DX_EnableAutoOctreeUpdate(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.EnableAutoOctreeUpdate = (global::System.Boolean)Value;
        }
        private object get_99_Viewport3DX_RenderException(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.RenderException;
        }
        private void set_99_Viewport3DX_RenderException(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.RenderException = (global::System.Exception)Value;
        }
        private object get_100_Viewport3DX_FrameRate(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.FrameRate;
        }
        private void set_100_Viewport3DX_FrameRate(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.FrameRate = (global::System.Double)Value;
        }
        private object get_101_Viewport3DX_OITRenderMode(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.OITRenderMode;
        }
        private void set_101_Viewport3DX_OITRenderMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.OITRenderMode = (global::HelixToolkit.SharpDX.Core.OITRenderType)Value;
        }
        private object get_102_Viewport3DX_OITDepthPeelingIteration(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.OITDepthPeelingIteration;
        }
        private void set_102_Viewport3DX_OITDepthPeelingIteration(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.OITDepthPeelingIteration = (global::System.Int32)Value;
        }
        private object get_103_Viewport3DX_OITWeightPower(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.OITWeightPower;
        }
        private void set_103_Viewport3DX_OITWeightPower(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.OITWeightPower = (global::System.Double)Value;
        }
        private object get_104_Viewport3DX_OITWeightDepthSlope(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.OITWeightDepthSlope;
        }
        private void set_104_Viewport3DX_OITWeightDepthSlope(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.OITWeightDepthSlope = (global::System.Double)Value;
        }
        private object get_105_Viewport3DX_OITWeightMode(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.OITWeightMode;
        }
        private void set_105_Viewport3DX_OITWeightMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.OITWeightMode = (global::HelixToolkit.SharpDX.Core.OITWeightMode)Value;
        }
        private object get_106_Viewport3DX_EnableDesignModeRendering(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.EnableDesignModeRendering;
        }
        private void set_106_Viewport3DX_EnableDesignModeRendering(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.EnableDesignModeRendering = (global::System.Boolean)Value;
        }
        private object get_107_Viewport3DX_EnableSharedModelMode(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.EnableSharedModelMode;
        }
        private void set_107_Viewport3DX_EnableSharedModelMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.EnableSharedModelMode = (global::System.Boolean)Value;
        }
        private object get_108_Viewport3DX_SharedModelContainer(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.SharedModelContainer;
        }
        private void set_108_Viewport3DX_SharedModelContainer(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.SharedModelContainer = (global::HelixToolkit.SharpDX.Core.IModelContainer)Value;
        }
        private object get_109_Viewport3DX_ShowCameraInfo(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ShowCameraInfo;
        }
        private void set_109_Viewport3DX_ShowCameraInfo(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ShowCameraInfo = (global::System.Boolean)Value;
        }
        private object get_110_Viewport3DX_ShowFrameRate(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ShowFrameRate;
        }
        private void set_110_Viewport3DX_ShowFrameRate(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ShowFrameRate = (global::System.Boolean)Value;
        }
        private object get_111_Viewport3DX_ShowFrameDetails(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ShowFrameDetails;
        }
        private void set_111_Viewport3DX_ShowFrameDetails(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ShowFrameDetails = (global::System.Boolean)Value;
        }
        private object get_112_Viewport3DX_ShowTriangleCountInfo(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.ShowTriangleCountInfo;
        }
        private void set_112_Viewport3DX_ShowTriangleCountInfo(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.ShowTriangleCountInfo = (global::System.Boolean)Value;
        }
        private object get_113_Viewport3DX_RenderDetailOutput(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.RenderDetailOutput;
        }
        private void set_113_Viewport3DX_RenderDetailOutput(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.RenderDetailOutput = (global::System.String)Value;
        }
        private object get_114_Viewport3DX_EnableRenderOrder(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.EnableRenderOrder;
        }
        private void set_114_Viewport3DX_EnableRenderOrder(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.EnableRenderOrder = (global::System.Boolean)Value;
        }
        private object get_115_Viewport3DX_EnableSSAO(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.EnableSSAO;
        }
        private void set_115_Viewport3DX_EnableSSAO(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.EnableSSAO = (global::System.Boolean)Value;
        }
        private object get_116_Viewport3DX_SSAOSamplingRadius(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.SSAOSamplingRadius;
        }
        private void set_116_Viewport3DX_SSAOSamplingRadius(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.SSAOSamplingRadius = (global::System.Double)Value;
        }
        private object get_117_Viewport3DX_SSAOIntensity(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.SSAOIntensity;
        }
        private void set_117_Viewport3DX_SSAOIntensity(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.SSAOIntensity = (global::System.Double)Value;
        }
        private object get_118_Viewport3DX_SSAOQuality(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.SSAOQuality;
        }
        private void set_118_Viewport3DX_SSAOQuality(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.SSAOQuality = (global::HelixToolkit.SharpDX.Core.SSAOQuality)Value;
        }
        private object get_119_Viewport3DX_MinimumUpdateCount(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.MinimumUpdateCount;
        }
        private void set_119_Viewport3DX_MinimumUpdateCount(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.MinimumUpdateCount = (global::System.Int32)Value;
        }
        private object get_120_Viewport3DX_EnableDpiScale(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            return that.EnableDpiScale;
        }
        private void set_120_Viewport3DX_EnableDpiScale(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Viewport3DX)instance;
            that.EnableDpiScale = (global::System.Boolean)Value;
        }
        private object get_121_GroupElement3D_Children(object instance)
        {
            var that = (global::HelixToolkit.WinUI.GroupElement3D)instance;
            return that.Children;
        }
        private object get_122_GroupElement3D_ItemsSource(object instance)
        {
            var that = (global::HelixToolkit.WinUI.GroupElement3D)instance;
            return that.ItemsSource;
        }
        private void set_122_GroupElement3D_ItemsSource(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.GroupElement3D)instance;
            that.ItemsSource = (global::System.Collections.Generic.IList<global::HelixToolkit.WinUI.Element3D>)Value;
        }
        private object get_123_GroupElement3D_OctreeManager(object instance)
        {
            var that = (global::HelixToolkit.WinUI.GroupElement3D)instance;
            return that.OctreeManager;
        }
        private void set_123_GroupElement3D_OctreeManager(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.GroupElement3D)instance;
            that.OctreeManager = (global::HelixToolkit.WinUI.IOctreeManagerWrapper)Value;
        }
        private object get_124_GroupElement3D_AlwaysHittable(object instance)
        {
            var that = (global::HelixToolkit.WinUI.GroupElement3D)instance;
            return that.AlwaysHittable;
        }
        private void set_124_GroupElement3D_AlwaysHittable(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.GroupElement3D)instance;
            that.AlwaysHittable = (global::System.Boolean)Value;
        }
        private object get_125_GroupElement3D_Items(object instance)
        {
            var that = (global::HelixToolkit.WinUI.GroupElement3D)instance;
            return that.Items;
        }
        private object get_126_CustomBox3D_PosX(object instance)
        {
            var that = (global::SampleNavigationHelix.CustomUIElement.CustomBox3D)instance;
            return that.PosX;
        }
        private void set_126_CustomBox3D_PosX(object instance, object Value)
        {
            var that = (global::SampleNavigationHelix.CustomUIElement.CustomBox3D)instance;
            that.PosX = (global::System.Int32)Value;
        }
        private object get_127_CustomBox3D_PosY(object instance)
        {
            var that = (global::SampleNavigationHelix.CustomUIElement.CustomBox3D)instance;
            return that.PosY;
        }
        private void set_127_CustomBox3D_PosY(object instance, object Value)
        {
            var that = (global::SampleNavigationHelix.CustomUIElement.CustomBox3D)instance;
            that.PosY = (global::System.Int32)Value;
        }
        private object get_128_CustomBox3D_PosZ(object instance)
        {
            var that = (global::SampleNavigationHelix.CustomUIElement.CustomBox3D)instance;
            return that.PosZ;
        }
        private void set_128_CustomBox3D_PosZ(object instance, object Value)
        {
            var that = (global::SampleNavigationHelix.CustomUIElement.CustomBox3D)instance;
            that.PosZ = (global::System.Int32)Value;
        }
        private object get_129_BatchedMeshGeometryModel3D_BatchedGeometries(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.BatchedGeometries;
        }
        private void set_129_BatchedMeshGeometryModel3D_BatchedGeometries(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.BatchedGeometries = (global::System.Collections.Generic.IList<global::HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig>)Value;
        }
        private object get_130_BatchedMeshGeometryConfig_Geometry(object instance)
        {
            var that = (global::HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig)instance;
            return that.Geometry;
        }
        private object get_131_BatchedMeshGeometryConfig_ModelTransform(object instance)
        {
            var that = (global::HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig)instance;
            return that.ModelTransform;
        }
        private object get_132_BatchedMeshGeometryConfig_MaterialIndex(object instance)
        {
            var that = (global::HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig)instance;
            return that.MaterialIndex;
        }
        private object get_133_BatchedMeshGeometryModel3D_BatchedMaterials(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.BatchedMaterials;
        }
        private void set_133_BatchedMeshGeometryModel3D_BatchedMaterials(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.BatchedMaterials = (global::System.Collections.Generic.IList<global::HelixToolkit.WinUI.Material>)Value;
        }
        private object get_134_Material_Core(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Material)instance;
            return that.Core;
        }
        private object get_135_Material_Name(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Material)instance;
            return that.Name;
        }
        private void set_135_Material_Name(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Material)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_136_BatchedMeshGeometryModel3D_PostEffects(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.PostEffects;
        }
        private void set_136_BatchedMeshGeometryModel3D_PostEffects(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.PostEffects = (global::System.String)Value;
        }
        private object get_137_BatchedMeshGeometryModel3D_IsThrowingShadow(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.IsThrowingShadow;
        }
        private void set_137_BatchedMeshGeometryModel3D_IsThrowingShadow(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.IsThrowingShadow = (global::System.Boolean)Value;
        }
        private object get_138_BatchedMeshGeometryModel3D_DepthBias(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.DepthBias;
        }
        private void set_138_BatchedMeshGeometryModel3D_DepthBias(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.DepthBias = (global::System.Int32)Value;
        }
        private object get_139_BatchedMeshGeometryModel3D_SlopeScaledDepthBias(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.SlopeScaledDepthBias;
        }
        private void set_139_BatchedMeshGeometryModel3D_SlopeScaledDepthBias(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.SlopeScaledDepthBias = (global::System.Double)Value;
        }
        private object get_140_BatchedMeshGeometryModel3D_IsSelected(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.IsSelected;
        }
        private void set_140_BatchedMeshGeometryModel3D_IsSelected(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_141_BatchedMeshGeometryModel3D_IsMultisampleEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.IsMultisampleEnabled;
        }
        private void set_141_BatchedMeshGeometryModel3D_IsMultisampleEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.IsMultisampleEnabled = (global::System.Boolean)Value;
        }
        private object get_142_BatchedMeshGeometryModel3D_FillMode(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.FillMode;
        }
        private void set_142_BatchedMeshGeometryModel3D_FillMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.FillMode = (global::SharpDX.Direct3D11.FillMode)Value;
        }
        private object get_143_BatchedMeshGeometryModel3D_IsScissorEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.IsScissorEnabled;
        }
        private void set_143_BatchedMeshGeometryModel3D_IsScissorEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.IsScissorEnabled = (global::System.Boolean)Value;
        }
        private object get_144_BatchedMeshGeometryModel3D_IsDepthClipEnabled(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.IsDepthClipEnabled;
        }
        private void set_144_BatchedMeshGeometryModel3D_IsDepthClipEnabled(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.IsDepthClipEnabled = (global::System.Boolean)Value;
        }
        private object get_145_BatchedMeshGeometryModel3D_EnableViewFrustumCheck(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.EnableViewFrustumCheck;
        }
        private void set_145_BatchedMeshGeometryModel3D_EnableViewFrustumCheck(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.EnableViewFrustumCheck = (global::System.Boolean)Value;
        }
        private object get_146_BatchedMeshGeometryModel3D_Material(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.Material;
        }
        private void set_146_BatchedMeshGeometryModel3D_Material(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.Material = (global::HelixToolkit.WinUI.Material)Value;
        }
        private object get_147_BatchedMeshGeometryModel3D_IsTransparent(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.IsTransparent;
        }
        private void set_147_BatchedMeshGeometryModel3D_IsTransparent(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.IsTransparent = (global::System.Boolean)Value;
        }
        private object get_148_BatchedMeshGeometryModel3D_RenderWireframe(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.RenderWireframe;
        }
        private void set_148_BatchedMeshGeometryModel3D_RenderWireframe(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.RenderWireframe = (global::System.Boolean)Value;
        }
        private object get_149_BatchedMeshGeometryModel3D_WireframeColor(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.WireframeColor;
        }
        private void set_149_BatchedMeshGeometryModel3D_WireframeColor(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.WireframeColor = (global::Windows.UI.Color)Value;
        }
        private object get_150_BatchedMeshGeometryModel3D_FrontCounterClockwise(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.FrontCounterClockwise;
        }
        private void set_150_BatchedMeshGeometryModel3D_FrontCounterClockwise(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.FrontCounterClockwise = (global::System.Boolean)Value;
        }
        private object get_151_BatchedMeshGeometryModel3D_CullMode(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.CullMode;
        }
        private void set_151_BatchedMeshGeometryModel3D_CullMode(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.CullMode = (global::SharpDX.Direct3D11.CullMode)Value;
        }
        private object get_152_BatchedMeshGeometryModel3D_InvertNormal(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.InvertNormal;
        }
        private void set_152_BatchedMeshGeometryModel3D_InvertNormal(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.InvertNormal = (global::System.Boolean)Value;
        }
        private object get_153_BatchedMeshGeometryModel3D_AlwaysHittable(object instance)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            return that.AlwaysHittable;
        }
        private void set_153_BatchedMeshGeometryModel3D_AlwaysHittable(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.BatchedMeshGeometryModel3D)instance;
            that.AlwaysHittable = (global::System.Boolean)Value;
        }
        private object get_154_Light3D_Color(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Light3D)instance;
            return that.Color;
        }
        private void set_154_Light3D_Color(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.Light3D)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_155_Light3D_LightType(object instance)
        {
            var that = (global::HelixToolkit.WinUI.Light3D)instance;
            return that.LightType;
        }
        private object get_156_ItemsModel3D_ItemTemplate(object instance)
        {
            var that = (global::HelixToolkit.WinUI.ItemsModel3D)instance;
            return that.ItemTemplate;
        }
        private void set_156_ItemsModel3D_ItemTemplate(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.ItemsModel3D)instance;
            that.ItemTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_157_ItemsModel3D_ItemsSource(object instance)
        {
            var that = (global::HelixToolkit.WinUI.ItemsModel3D)instance;
            return that.ItemsSource;
        }
        private void set_157_ItemsModel3D_ItemsSource(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.ItemsModel3D)instance;
            that.ItemsSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_158_ItemsModel3D_ItemTemplateSelector(object instance)
        {
            var that = (global::HelixToolkit.WinUI.ItemsModel3D)instance;
            return that.ItemTemplateSelector;
        }
        private void set_158_ItemsModel3D_ItemTemplateSelector(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.ItemsModel3D)instance;
            that.ItemTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_159_ItemsModel3D_OctreeManager(object instance)
        {
            var that = (global::HelixToolkit.WinUI.ItemsModel3D)instance;
            return that.OctreeManager;
        }
        private void set_159_ItemsModel3D_OctreeManager(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.ItemsModel3D)instance;
            that.OctreeManager = (global::HelixToolkit.WinUI.IOctreeManagerWrapper)Value;
        }
        private object get_160_ItemsModel3D_AlwaysHittable(object instance)
        {
            var that = (global::HelixToolkit.WinUI.ItemsModel3D)instance;
            return that.AlwaysHittable;
        }
        private void set_160_ItemsModel3D_AlwaysHittable(object instance, object Value)
        {
            var that = (global::HelixToolkit.WinUI.ItemsModel3D)instance;
            that.AlwaysHittable = (global::System.Boolean)Value;
        }
        private object get_161_ItemsModel3D_Children(object instance)
        {
            var that = (global::HelixToolkit.WinUI.ItemsModel3D)instance;
            return that.Children;
        }
        private object get_162_ItemsModel3D_Items(object instance)
        {
            var that = (global::HelixToolkit.WinUI.ItemsModel3D)instance;
            return that.Items;
        }
        private object get_163_HelixPageView_ViewModel(object instance)
        {
            var that = (global::SampleNavigationHelix.Views.HelixPageView)instance;
            return that.ViewModel;
        }
        private void set_163_HelixPageView_ViewModel(object instance, object Value)
        {
            var that = (global::SampleNavigationHelix.Views.HelixPageView)instance;
            that.ViewModel = (global::SampleNavigationHelix.ViewModels.HelixViewModel)Value;
        }
        private object get_164_NavigationView_AlwaysShowHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AlwaysShowHeader;
        }
        private void set_164_NavigationView_AlwaysShowHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AlwaysShowHeader = (global::System.Boolean)Value;
        }
        private object get_165_NavigationView_CompactModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactModeThresholdWidth;
        }
        private void set_165_NavigationView_CompactModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_166_NavigationView_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactPaneLength;
        }
        private void set_166_NavigationView_CompactPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactPaneLength = (global::System.Double)Value;
        }
        private object get_167_NavigationView_ExpandedModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ExpandedModeThresholdWidth;
        }
        private void set_167_NavigationView_ExpandedModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ExpandedModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_168_NavigationView_IsBackButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackButtonVisible;
        }
        private void set_168_NavigationView_IsBackButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackButtonVisible = (global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible)Value;
        }
        private object get_169_NavigationView_IsBackEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackEnabled;
        }
        private void set_169_NavigationView_IsBackEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackEnabled = (global::System.Boolean)Value;
        }
        private object get_170_NavigationView_IsSettingsVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsSettingsVisible;
        }
        private void set_170_NavigationView_IsSettingsVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsSettingsVisible = (global::System.Boolean)Value;
        }
        private object get_171_NavigationView_OpenPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OpenPaneLength;
        }
        private void set_171_NavigationView_OpenPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OpenPaneLength = (global::System.Double)Value;
        }
        private object get_172_NavigationView_PaneTitle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneTitle;
        }
        private void set_172_NavigationView_PaneTitle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneTitle = (global::System.String)Value;
        }
        private object get_173_NavigationView_SelectionFollowsFocus(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectionFollowsFocus;
        }
        private void set_173_NavigationView_SelectionFollowsFocus(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectionFollowsFocus = (global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus)Value;
        }
        private object get_174_NavigationView_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItems;
        }
        private object get_175_NavigationView_AutoSuggestBox(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AutoSuggestBox;
        }
        private void set_175_NavigationView_AutoSuggestBox(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AutoSuggestBox = (global::Microsoft.UI.Xaml.Controls.AutoSuggestBox)Value;
        }
        private object get_176_NavigationView_ContentOverlay(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ContentOverlay;
        }
        private void set_176_NavigationView_ContentOverlay(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ContentOverlay = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_177_NavigationView_DisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.DisplayMode;
        }
        private object get_178_NavigationView_FooterMenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItems;
        }
        private object get_179_NavigationView_FooterMenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItemsSource;
        }
        private void set_179_NavigationView_FooterMenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.FooterMenuItemsSource = (global::System.Object)Value;
        }
        private object get_180_NavigationView_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.Header;
        }
        private void set_180_NavigationView_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_181_NavigationView_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.HeaderTemplate;
        }
        private void set_181_NavigationView_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_182_NavigationView_IsPaneOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneOpen;
        }
        private void set_182_NavigationView_IsPaneOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneOpen = (global::System.Boolean)Value;
        }
        private object get_183_NavigationView_IsPaneToggleButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneToggleButtonVisible;
        }
        private void set_183_NavigationView_IsPaneToggleButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneToggleButtonVisible = (global::System.Boolean)Value;
        }
        private object get_184_NavigationView_IsPaneVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneVisible;
        }
        private void set_184_NavigationView_IsPaneVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneVisible = (global::System.Boolean)Value;
        }
        private object get_185_NavigationView_IsTitleBarAutoPaddingEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsTitleBarAutoPaddingEnabled;
        }
        private void set_185_NavigationView_IsTitleBarAutoPaddingEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsTitleBarAutoPaddingEnabled = (global::System.Boolean)Value;
        }
        private object get_186_NavigationView_MenuItemContainerStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyle;
        }
        private void set_186_NavigationView_MenuItemContainerStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_187_NavigationView_MenuItemContainerStyleSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyleSelector;
        }
        private void set_187_NavigationView_MenuItemContainerStyleSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyleSelector = (global::Microsoft.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_188_NavigationView_MenuItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplate;
        }
        private void set_188_NavigationView_MenuItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_189_NavigationView_MenuItemTemplateSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplateSelector;
        }
        private void set_189_NavigationView_MenuItemTemplateSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_190_NavigationView_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemsSource;
        }
        private void set_190_NavigationView_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_191_NavigationView_OverflowLabelMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OverflowLabelMode;
        }
        private void set_191_NavigationView_OverflowLabelMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OverflowLabelMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode)Value;
        }
        private object get_192_NavigationView_PaneCustomContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneCustomContent;
        }
        private void set_192_NavigationView_PaneCustomContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneCustomContent = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_193_NavigationView_PaneDisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneDisplayMode;
        }
        private void set_193_NavigationView_PaneDisplayMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneDisplayMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode)Value;
        }
        private object get_194_NavigationView_PaneFooter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneFooter;
        }
        private void set_194_NavigationView_PaneFooter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneFooter = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_195_NavigationView_PaneHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneHeader;
        }
        private void set_195_NavigationView_PaneHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneHeader = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_196_NavigationView_PaneToggleButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneToggleButtonStyle;
        }
        private void set_196_NavigationView_PaneToggleButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneToggleButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_197_NavigationView_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectedItem;
        }
        private void set_197_NavigationView_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_198_NavigationView_SettingsItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SettingsItem;
        }
        private object get_199_NavigationView_ShoulderNavigationEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ShoulderNavigationEnabled;
        }
        private void set_199_NavigationView_ShoulderNavigationEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ShoulderNavigationEnabled = (global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled)Value;
        }
        private object get_200_NavigationView_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.TemplateSettings;
        }
        private object get_201_NavigationViewItem_Icon(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.Icon;
        }
        private void set_201_NavigationViewItem_Icon(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.Icon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_202_NavigationViewItem_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.CompactPaneLength;
        }
        private object get_203_NavigationViewItem_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_203_NavigationViewItem_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_204_NavigationViewItem_IsChildSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsChildSelected;
        }
        private void set_204_NavigationViewItem_IsChildSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsChildSelected = (global::System.Boolean)Value;
        }
        private object get_205_NavigationViewItem_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsExpanded;
        }
        private void set_205_NavigationViewItem_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_206_NavigationViewItem_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItems;
        }
        private object get_207_NavigationViewItem_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItemsSource;
        }
        private void set_207_NavigationViewItem_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_208_NavigationViewItem_SelectsOnInvoked(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.SelectsOnInvoked;
        }
        private void set_208_NavigationViewItem_SelectsOnInvoked(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.SelectsOnInvoked = (global::System.Boolean)Value;
        }
        private object get_209_NavigationViewItemBase_IsSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            return that.IsSelected;
        }
        private void set_209_NavigationViewItemBase_IsSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_210_MainWindow_ViewModel(object instance)
        {
            var that = (global::SampleNavigationHelix.Views.MainWindow)instance;
            return that.ViewModel;
        }
        private void set_210_MainWindow_ViewModel(object instance, object Value)
        {
            var that = (global::SampleNavigationHelix.Views.MainWindow)instance;
            that.ViewModel = (global::SampleNavigationHelix.ViewModels.MainWindowViewModel)Value;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember xamlMember = null;
            global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.Items":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Items", "HelixToolkit.WinUI.ObservableElement3DCollection");
                xamlMember.Getter = get_1_Viewport3DX_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Element3D.IsRendering":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Element3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsRendering", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_Element3D_IsRendering;
                xamlMember.Setter = set_2_Element3D_IsRendering;
                break;
            case "HelixToolkit.WinUI.Element3D.HxTransform3D":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Element3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "HxTransform3D", "SharpDX.Matrix");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_Element3D_HxTransform3D;
                xamlMember.Setter = set_3_Element3D_HxTransform3D;
                break;
            case "HelixToolkit.WinUI.Element3D.RenderOrder":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Element3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "RenderOrder", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_Element3D_RenderOrder;
                xamlMember.Setter = set_4_Element3D_RenderOrder;
                break;
            case "HelixToolkit.WinUI.Model.Element3DCore.GUID":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Model.Element3DCore");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "GUID", "Guid");
                xamlMember.Getter = get_5_Element3DCore_GUID;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Model.Element3DCore.TotalModelMatrix":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Model.Element3DCore");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "TotalModelMatrix", "SharpDX.Matrix");
                xamlMember.Getter = get_6_Element3DCore_TotalModelMatrix;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Model.Element3DCore.Visible":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Model.Element3DCore");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Visible", "Boolean");
                xamlMember.Getter = get_7_Element3DCore_Visible;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Model.Element3DCore.IsAttached":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Model.Element3DCore");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsAttached", "Boolean");
                xamlMember.Getter = get_8_Element3DCore_IsAttached;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Model.Element3DCore.SceneNode":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Model.Element3DCore");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "SceneNode", "HelixToolkit.SharpDX.Core.Model.Scene.SceneNode");
                xamlMember.Getter = get_9_Element3DCore_SceneNode;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Model.Element3DCore.Bounds":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Model.Element3DCore");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Bounds", "SharpDX.BoundingBox");
                xamlMember.Getter = get_10_Element3DCore_Bounds;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Model.Element3DCore.BoundsWithTransform":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Model.Element3DCore");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "BoundsWithTransform", "SharpDX.BoundingBox");
                xamlMember.Getter = get_11_Element3DCore_BoundsWithTransform;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Model.Element3DCore.BoundsSphere":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Model.Element3DCore");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "BoundsSphere", "SharpDX.BoundingSphere");
                xamlMember.Getter = get_12_Element3DCore_BoundsSphere;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Model.Element3DCore.BoundsSphereWithTransform":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Model.Element3DCore");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "BoundsSphereWithTransform", "SharpDX.BoundingSphere");
                xamlMember.Getter = get_13_Element3DCore_BoundsSphereWithTransform;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Viewport3DX.BackgroundColor":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "BackgroundColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_Viewport3DX_BackgroundColor;
                xamlMember.Setter = set_14_Viewport3DX_BackgroundColor;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CameraMode":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CameraMode", "HelixToolkit.SharpDX.Core.CameraMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_Viewport3DX_CameraMode;
                xamlMember.Setter = set_15_Viewport3DX_CameraMode;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CameraRotationMode":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CameraRotationMode", "HelixToolkit.SharpDX.Core.CameraRotationMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_Viewport3DX_CameraRotationMode;
                xamlMember.Setter = set_16_Viewport3DX_CameraRotationMode;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.FXAALevel":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "FXAALevel", "HelixToolkit.SharpDX.Core.FXAALevel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_Viewport3DX_FXAALevel;
                xamlMember.Setter = set_17_Viewport3DX_FXAALevel;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.FixedRotationPointEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "FixedRotationPointEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_Viewport3DX_FixedRotationPointEnabled;
                xamlMember.Setter = set_18_Viewport3DX_FixedRotationPointEnabled;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.IsChangeFieldOfViewEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsChangeFieldOfViewEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_Viewport3DX_IsChangeFieldOfViewEnabled;
                xamlMember.Setter = set_19_Viewport3DX_IsChangeFieldOfViewEnabled;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.IsInertiaEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsInertiaEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_Viewport3DX_IsInertiaEnabled;
                xamlMember.Setter = set_20_Viewport3DX_IsInertiaEnabled;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.IsMoveEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsMoveEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_Viewport3DX_IsMoveEnabled;
                xamlMember.Setter = set_21_Viewport3DX_IsMoveEnabled;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.IsPanEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsPanEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_Viewport3DX_IsPanEnabled;
                xamlMember.Setter = set_22_Viewport3DX_IsPanEnabled;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.IsRotationEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsRotationEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_Viewport3DX_IsRotationEnabled;
                xamlMember.Setter = set_23_Viewport3DX_IsRotationEnabled;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.IsZoomEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsZoomEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_Viewport3DX_IsZoomEnabled;
                xamlMember.Setter = set_24_Viewport3DX_IsZoomEnabled;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.PanCursor":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PanCursor", "Windows.UI.Core.CoreCursorType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_Viewport3DX_PanCursor;
                xamlMember.Setter = set_25_Viewport3DX_PanCursor;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.RotateAroundMouseDownPoint":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "RotateAroundMouseDownPoint", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_Viewport3DX_RotateAroundMouseDownPoint;
                xamlMember.Setter = set_26_Viewport3DX_RotateAroundMouseDownPoint;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.RotateCursor":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "RotateCursor", "Windows.UI.Core.CoreCursorType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_Viewport3DX_RotateCursor;
                xamlMember.Setter = set_27_Viewport3DX_RotateCursor;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ShowCoordinateSystem":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ShowCoordinateSystem", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_Viewport3DX_ShowCoordinateSystem;
                xamlMember.Setter = set_28_Viewport3DX_ShowCoordinateSystem;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ShowViewCube":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ShowViewCube", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_Viewport3DX_ShowViewCube;
                xamlMember.Setter = set_29_Viewport3DX_ShowViewCube;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ZoomAroundMouseDownPoint":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ZoomAroundMouseDownPoint", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_Viewport3DX_ZoomAroundMouseDownPoint;
                xamlMember.Setter = set_30_Viewport3DX_ZoomAroundMouseDownPoint;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.InputBindings":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "InputBindings", "HelixToolkit.WinUI.InputBindingCollection");
                xamlMember.Getter = get_31_Viewport3DX_InputBindings;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.InputBinding.Command":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.InputBinding");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_InputBinding_Command;
                xamlMember.Setter = set_32_InputBinding_Command;
                break;
            case "HelixToolkit.WinUI.InputBinding.CommandParameter":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.InputBinding");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_InputBinding_CommandParameter;
                xamlMember.Setter = set_33_InputBinding_CommandParameter;
                break;
            case "HelixToolkit.WinUI.InputBinding.CommandTarget":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.InputBinding");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CommandTarget", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_InputBinding_CommandTarget;
                xamlMember.Setter = set_34_InputBinding_CommandTarget;
                break;
            case "HelixToolkit.WinUI.InputBinding.Gesture":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.InputBinding");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Gesture", "HelixToolkit.WinUI.InputGesture");
                xamlMember.Getter = get_35_InputBinding_Gesture;
                xamlMember.Setter = set_35_InputBinding_Gesture;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.RenderHost":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "RenderHost", "HelixToolkit.SharpDX.Core.IRenderHost");
                xamlMember.Getter = get_36_Viewport3DX_RenderHost;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CameraCore":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CameraCore", "HelixToolkit.SharpDX.Core.Cameras.CameraCore");
                xamlMember.Getter = get_37_Viewport3DX_CameraCore;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ManipulationBindings":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ManipulationBindings", "HelixToolkit.WinUI.ManipulationBindingCollection");
                xamlMember.Getter = get_38_Viewport3DX_ManipulationBindings;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.ManipulationBinding.Command":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.ManipulationBinding");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Command", "HelixToolkit.WinUI.ViewportCommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_ManipulationBinding_Command;
                xamlMember.Setter = set_39_ManipulationBinding_Command;
                break;
            case "HelixToolkit.WinUI.ManipulationBinding.CommandParameter":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.ManipulationBinding");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_ManipulationBinding_CommandParameter;
                xamlMember.Setter = set_40_ManipulationBinding_CommandParameter;
                break;
            case "HelixToolkit.WinUI.ManipulationBinding.CommandTarget":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.ManipulationBinding");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CommandTarget", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_ManipulationBinding_CommandTarget;
                xamlMember.Setter = set_41_ManipulationBinding_CommandTarget;
                break;
            case "HelixToolkit.WinUI.ManipulationBinding.FingerCount":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.ManipulationBinding");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "FingerCount", "Int32");
                xamlMember.Getter = get_42_ManipulationBinding_FingerCount;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.ManipulationBinding.Gesture":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.ManipulationBinding");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Gesture", "HelixToolkit.WinUI.ManipulationGesture");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_ManipulationBinding_Gesture;
                xamlMember.Setter = set_43_ManipulationBinding_Gesture;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.Renderables":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Renderables", "System.Collections.Generic.IEnumerable`1<HelixToolkit.SharpDX.Core.Model.Scene.SceneNode>");
                xamlMember.Getter = get_44_Viewport3DX_Renderables;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Viewport3DX.D2DRenderables":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "D2DRenderables", "System.Collections.Generic.IEnumerable`1<HelixToolkit.SharpDX.Core.Model.Scene2D.SceneNode2D>");
                xamlMember.Getter = get_45_Viewport3DX_D2DRenderables;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Viewport3DX.RenderContext":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "RenderContext", "HelixToolkit.SharpDX.Core.RenderContext");
                xamlMember.Getter = get_46_Viewport3DX_RenderContext;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ViewportRectangle":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ViewportRectangle", "SharpDX.Rectangle");
                xamlMember.Getter = get_47_Viewport3DX_ViewportRectangle;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Viewport3DX.IsShadowMappingEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsShadowMappingEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_Viewport3DX_IsShadowMappingEnabled;
                xamlMember.Setter = set_48_Viewport3DX_IsShadowMappingEnabled;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.EffectsManager":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "EffectsManager", "HelixToolkit.SharpDX.Core.IEffectsManager");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_Viewport3DX_EffectsManager;
                xamlMember.Setter = set_49_Viewport3DX_EffectsManager;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.Camera":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Camera", "HelixToolkit.WinUI.Camera");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_Viewport3DX_Camera;
                xamlMember.Setter = set_50_Viewport3DX_Camera;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.DefaultCamera":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "DefaultCamera", "HelixToolkit.WinUI.ProjectionCamera");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_Viewport3DX_DefaultCamera;
                xamlMember.Setter = set_51_Viewport3DX_DefaultCamera;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ModelUpDirection":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ModelUpDirection", "SharpDX.Vector3");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_Viewport3DX_ModelUpDirection;
                xamlMember.Setter = set_52_Viewport3DX_ModelUpDirection;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.MessageText":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MessageText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_Viewport3DX_MessageText;
                xamlMember.Setter = set_53_Viewport3DX_MessageText;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CoordinateSystemHorizontalPosition":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CoordinateSystemHorizontalPosition", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_Viewport3DX_CoordinateSystemHorizontalPosition;
                xamlMember.Setter = set_54_Viewport3DX_CoordinateSystemHorizontalPosition;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CoordinateSystemLabelForeground":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CoordinateSystemLabelForeground", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_Viewport3DX_CoordinateSystemLabelForeground;
                xamlMember.Setter = set_55_Viewport3DX_CoordinateSystemLabelForeground;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CoordinateSystemLabelX":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CoordinateSystemLabelX", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_Viewport3DX_CoordinateSystemLabelX;
                xamlMember.Setter = set_56_Viewport3DX_CoordinateSystemLabelX;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CoordinateSystemLabelY":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CoordinateSystemLabelY", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_Viewport3DX_CoordinateSystemLabelY;
                xamlMember.Setter = set_57_Viewport3DX_CoordinateSystemLabelY;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CoordinateSystemLabelZ":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CoordinateSystemLabelZ", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_Viewport3DX_CoordinateSystemLabelZ;
                xamlMember.Setter = set_58_Viewport3DX_CoordinateSystemLabelZ;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CoordinateSystemAxisXColor":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CoordinateSystemAxisXColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_Viewport3DX_CoordinateSystemAxisXColor;
                xamlMember.Setter = set_59_Viewport3DX_CoordinateSystemAxisXColor;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CoordinateSystemAxisYColor":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CoordinateSystemAxisYColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_Viewport3DX_CoordinateSystemAxisYColor;
                xamlMember.Setter = set_60_Viewport3DX_CoordinateSystemAxisYColor;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CoordinateSystemAxisZColor":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CoordinateSystemAxisZColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_Viewport3DX_CoordinateSystemAxisZColor;
                xamlMember.Setter = set_61_Viewport3DX_CoordinateSystemAxisZColor;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CoordinateSystemVerticalPosition":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CoordinateSystemVerticalPosition", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_Viewport3DX_CoordinateSystemVerticalPosition;
                xamlMember.Setter = set_62_Viewport3DX_CoordinateSystemVerticalPosition;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CoordinateSystemSize":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CoordinateSystemSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_Viewport3DX_CoordinateSystemSize;
                xamlMember.Setter = set_63_Viewport3DX_CoordinateSystemSize;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ViewCubeTexture":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ViewCubeTexture", "System.IO.Stream");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_Viewport3DX_ViewCubeTexture;
                xamlMember.Setter = set_64_Viewport3DX_ViewCubeTexture;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ViewCubeHorizontalPosition":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ViewCubeHorizontalPosition", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_Viewport3DX_ViewCubeHorizontalPosition;
                xamlMember.Setter = set_65_Viewport3DX_ViewCubeHorizontalPosition;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.IsViewCubeEdgeClicksEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsViewCubeEdgeClicksEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_Viewport3DX_IsViewCubeEdgeClicksEnabled;
                xamlMember.Setter = set_66_Viewport3DX_IsViewCubeEdgeClicksEnabled;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ViewCubeVerticalPosition":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ViewCubeVerticalPosition", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_Viewport3DX_ViewCubeVerticalPosition;
                xamlMember.Setter = set_67_Viewport3DX_ViewCubeVerticalPosition;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ViewCubeSize":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ViewCubeSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_Viewport3DX_ViewCubeSize;
                xamlMember.Setter = set_68_Viewport3DX_ViewCubeSize;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.LeftRightRotationSensitivity":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "LeftRightRotationSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_Viewport3DX_LeftRightRotationSensitivity;
                xamlMember.Setter = set_69_Viewport3DX_LeftRightRotationSensitivity;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.LeftRightPanSensitivity":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "LeftRightPanSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_Viewport3DX_LeftRightPanSensitivity;
                xamlMember.Setter = set_70_Viewport3DX_LeftRightPanSensitivity;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.RotationSensitivity":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "RotationSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_Viewport3DX_RotationSensitivity;
                xamlMember.Setter = set_71_Viewport3DX_RotationSensitivity;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.UpDownPanSensitivity":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "UpDownPanSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_Viewport3DX_UpDownPanSensitivity;
                xamlMember.Setter = set_72_Viewport3DX_UpDownPanSensitivity;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.UpDownRotationSensitivity":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "UpDownRotationSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_Viewport3DX_UpDownRotationSensitivity;
                xamlMember.Setter = set_73_Viewport3DX_UpDownRotationSensitivity;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.AllowUpDownRotation":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "AllowUpDownRotation", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_Viewport3DX_AllowUpDownRotation;
                xamlMember.Setter = set_74_Viewport3DX_AllowUpDownRotation;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.AllowLeftRightRotation":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "AllowLeftRightRotation", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_Viewport3DX_AllowLeftRightRotation;
                xamlMember.Setter = set_75_Viewport3DX_AllowLeftRightRotation;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ZoomSensitivity":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ZoomSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_Viewport3DX_ZoomSensitivity;
                xamlMember.Setter = set_76_Viewport3DX_ZoomSensitivity;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.SpinReleaseTime":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "SpinReleaseTime", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_Viewport3DX_SpinReleaseTime;
                xamlMember.Setter = set_77_Viewport3DX_SpinReleaseTime;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.FixedRotationPoint":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "FixedRotationPoint", "SharpDX.Vector3");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_Viewport3DX_FixedRotationPoint;
                xamlMember.Setter = set_78_Viewport3DX_FixedRotationPoint;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.IsTouchRotateEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsTouchRotateEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_Viewport3DX_IsTouchRotateEnabled;
                xamlMember.Setter = set_79_Viewport3DX_IsTouchRotateEnabled;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.IsPinchZoomEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsPinchZoomEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_Viewport3DX_IsPinchZoomEnabled;
                xamlMember.Setter = set_80_Viewport3DX_IsPinchZoomEnabled;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.PinchZoomAtCenter":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PinchZoomAtCenter", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_Viewport3DX_PinchZoomAtCenter;
                xamlMember.Setter = set_81_Viewport3DX_PinchZoomAtCenter;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.IsThreeFingerPanningEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsThreeFingerPanningEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_Viewport3DX_IsThreeFingerPanningEnabled;
                xamlMember.Setter = set_82_Viewport3DX_IsThreeFingerPanningEnabled;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.MaximumFieldOfView":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MaximumFieldOfView", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_Viewport3DX_MaximumFieldOfView;
                xamlMember.Setter = set_83_Viewport3DX_MaximumFieldOfView;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.MinimumFieldOfView":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MinimumFieldOfView", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_Viewport3DX_MinimumFieldOfView;
                xamlMember.Setter = set_84_Viewport3DX_MinimumFieldOfView;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ZoomCursor":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ZoomCursor", "Windows.UI.Core.CoreCursorType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_Viewport3DX_ZoomCursor;
                xamlMember.Setter = set_85_Viewport3DX_ZoomCursor;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ZoomDistanceLimitFar":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ZoomDistanceLimitFar", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_Viewport3DX_ZoomDistanceLimitFar;
                xamlMember.Setter = set_86_Viewport3DX_ZoomDistanceLimitFar;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ZoomDistanceLimitNear":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ZoomDistanceLimitNear", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_Viewport3DX_ZoomDistanceLimitNear;
                xamlMember.Setter = set_87_Viewport3DX_ZoomDistanceLimitNear;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ZoomRectangleCursor":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ZoomRectangleCursor", "Windows.UI.Core.CoreCursorType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_Viewport3DX_ZoomRectangleCursor;
                xamlMember.Setter = set_88_Viewport3DX_ZoomRectangleCursor;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.CameraInertiaFactor":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CameraInertiaFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_Viewport3DX_CameraInertiaFactor;
                xamlMember.Setter = set_89_Viewport3DX_CameraInertiaFactor;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.InfiniteSpin":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "InfiniteSpin", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_Viewport3DX_InfiniteSpin;
                xamlMember.Setter = set_90_Viewport3DX_InfiniteSpin;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.InputController":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "InputController", "HelixToolkit.WinUI.InputController");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_Viewport3DX_InputController;
                xamlMember.Setter = set_91_Viewport3DX_InputController;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.PageUpDownZoomSensitivity":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PageUpDownZoomSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_Viewport3DX_PageUpDownZoomSensitivity;
                xamlMember.Setter = set_92_Viewport3DX_PageUpDownZoomSensitivity;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.MoveSensitivity":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MoveSensitivity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_Viewport3DX_MoveSensitivity;
                xamlMember.Setter = set_93_Viewport3DX_MoveSensitivity;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.EnableMouseButtonHitTest":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "EnableMouseButtonHitTest", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_Viewport3DX_EnableMouseButtonHitTest;
                xamlMember.Setter = set_94_Viewport3DX_EnableMouseButtonHitTest;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ManualLookAtPoint":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ManualLookAtPoint", "SharpDX.Vector3");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_Viewport3DX_ManualLookAtPoint;
                xamlMember.Setter = set_95_Viewport3DX_ManualLookAtPoint;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.EnableRenderFrustum":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "EnableRenderFrustum", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_Viewport3DX_EnableRenderFrustum;
                xamlMember.Setter = set_96_Viewport3DX_EnableRenderFrustum;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.EnableDeferredRendering":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "EnableDeferredRendering", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_Viewport3DX_EnableDeferredRendering;
                xamlMember.Setter = set_97_Viewport3DX_EnableDeferredRendering;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.EnableAutoOctreeUpdate":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "EnableAutoOctreeUpdate", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_Viewport3DX_EnableAutoOctreeUpdate;
                xamlMember.Setter = set_98_Viewport3DX_EnableAutoOctreeUpdate;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.RenderException":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "RenderException", "System.Exception");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_Viewport3DX_RenderException;
                xamlMember.Setter = set_99_Viewport3DX_RenderException;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.FrameRate":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "FrameRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_Viewport3DX_FrameRate;
                xamlMember.Setter = set_100_Viewport3DX_FrameRate;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.OITRenderMode":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "OITRenderMode", "HelixToolkit.SharpDX.Core.OITRenderType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_Viewport3DX_OITRenderMode;
                xamlMember.Setter = set_101_Viewport3DX_OITRenderMode;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.OITDepthPeelingIteration":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "OITDepthPeelingIteration", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_Viewport3DX_OITDepthPeelingIteration;
                xamlMember.Setter = set_102_Viewport3DX_OITDepthPeelingIteration;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.OITWeightPower":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "OITWeightPower", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_Viewport3DX_OITWeightPower;
                xamlMember.Setter = set_103_Viewport3DX_OITWeightPower;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.OITWeightDepthSlope":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "OITWeightDepthSlope", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_Viewport3DX_OITWeightDepthSlope;
                xamlMember.Setter = set_104_Viewport3DX_OITWeightDepthSlope;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.OITWeightMode":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "OITWeightMode", "HelixToolkit.SharpDX.Core.OITWeightMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_Viewport3DX_OITWeightMode;
                xamlMember.Setter = set_105_Viewport3DX_OITWeightMode;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.EnableDesignModeRendering":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "EnableDesignModeRendering", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_Viewport3DX_EnableDesignModeRendering;
                xamlMember.Setter = set_106_Viewport3DX_EnableDesignModeRendering;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.EnableSharedModelMode":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "EnableSharedModelMode", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_Viewport3DX_EnableSharedModelMode;
                xamlMember.Setter = set_107_Viewport3DX_EnableSharedModelMode;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.SharedModelContainer":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "SharedModelContainer", "HelixToolkit.SharpDX.Core.IModelContainer");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_Viewport3DX_SharedModelContainer;
                xamlMember.Setter = set_108_Viewport3DX_SharedModelContainer;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ShowCameraInfo":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ShowCameraInfo", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_Viewport3DX_ShowCameraInfo;
                xamlMember.Setter = set_109_Viewport3DX_ShowCameraInfo;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ShowFrameRate":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ShowFrameRate", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_Viewport3DX_ShowFrameRate;
                xamlMember.Setter = set_110_Viewport3DX_ShowFrameRate;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ShowFrameDetails":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ShowFrameDetails", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_Viewport3DX_ShowFrameDetails;
                xamlMember.Setter = set_111_Viewport3DX_ShowFrameDetails;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.ShowTriangleCountInfo":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ShowTriangleCountInfo", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_Viewport3DX_ShowTriangleCountInfo;
                xamlMember.Setter = set_112_Viewport3DX_ShowTriangleCountInfo;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.RenderDetailOutput":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "RenderDetailOutput", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_Viewport3DX_RenderDetailOutput;
                xamlMember.Setter = set_113_Viewport3DX_RenderDetailOutput;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.EnableRenderOrder":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "EnableRenderOrder", "Boolean");
                xamlMember.Getter = get_114_Viewport3DX_EnableRenderOrder;
                xamlMember.Setter = set_114_Viewport3DX_EnableRenderOrder;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.EnableSSAO":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "EnableSSAO", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_Viewport3DX_EnableSSAO;
                xamlMember.Setter = set_115_Viewport3DX_EnableSSAO;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.SSAOSamplingRadius":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "SSAOSamplingRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_Viewport3DX_SSAOSamplingRadius;
                xamlMember.Setter = set_116_Viewport3DX_SSAOSamplingRadius;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.SSAOIntensity":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "SSAOIntensity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_Viewport3DX_SSAOIntensity;
                xamlMember.Setter = set_117_Viewport3DX_SSAOIntensity;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.SSAOQuality":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "SSAOQuality", "HelixToolkit.SharpDX.Core.SSAOQuality");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_Viewport3DX_SSAOQuality;
                xamlMember.Setter = set_118_Viewport3DX_SSAOQuality;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.MinimumUpdateCount":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MinimumUpdateCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_Viewport3DX_MinimumUpdateCount;
                xamlMember.Setter = set_119_Viewport3DX_MinimumUpdateCount;
                break;
            case "HelixToolkit.WinUI.Viewport3DX.EnableDpiScale":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Viewport3DX");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "EnableDpiScale", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_Viewport3DX_EnableDpiScale;
                xamlMember.Setter = set_120_Viewport3DX_EnableDpiScale;
                break;
            case "HelixToolkit.WinUI.GroupElement3D.Children":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.GroupElement3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Children", "HelixToolkit.WinUI.ObservableElement3DCollection");
                xamlMember.Getter = get_121_GroupElement3D_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.GroupElement3D.ItemsSource":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.GroupElement3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.Generic.IList`1<HelixToolkit.WinUI.Element3D>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_GroupElement3D_ItemsSource;
                xamlMember.Setter = set_122_GroupElement3D_ItemsSource;
                break;
            case "HelixToolkit.WinUI.GroupElement3D.OctreeManager":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.GroupElement3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "OctreeManager", "HelixToolkit.WinUI.IOctreeManagerWrapper");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_GroupElement3D_OctreeManager;
                xamlMember.Setter = set_123_GroupElement3D_OctreeManager;
                break;
            case "HelixToolkit.WinUI.GroupElement3D.AlwaysHittable":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.GroupElement3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "AlwaysHittable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_GroupElement3D_AlwaysHittable;
                xamlMember.Setter = set_124_GroupElement3D_AlwaysHittable;
                break;
            case "HelixToolkit.WinUI.GroupElement3D.Items":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.GroupElement3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Items", "Microsoft.UI.Xaml.Controls.ItemCollection");
                xamlMember.Getter = get_125_GroupElement3D_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "SampleNavigationHelix.CustomUIElement.CustomBox3D.PosX":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SampleNavigationHelix.CustomUIElement.CustomBox3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PosX", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_CustomBox3D_PosX;
                xamlMember.Setter = set_126_CustomBox3D_PosX;
                break;
            case "SampleNavigationHelix.CustomUIElement.CustomBox3D.PosY":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SampleNavigationHelix.CustomUIElement.CustomBox3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PosY", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_CustomBox3D_PosY;
                xamlMember.Setter = set_127_CustomBox3D_PosY;
                break;
            case "SampleNavigationHelix.CustomUIElement.CustomBox3D.PosZ":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SampleNavigationHelix.CustomUIElement.CustomBox3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PosZ", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_CustomBox3D_PosZ;
                xamlMember.Setter = set_128_CustomBox3D_PosZ;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.BatchedGeometries":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "BatchedGeometries", "System.Collections.Generic.IList`1<HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_BatchedMeshGeometryModel3D_BatchedGeometries;
                xamlMember.Setter = set_129_BatchedMeshGeometryModel3D_BatchedGeometries;
                break;
            case "HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig.Geometry":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Geometry", "HelixToolkit.SharpDX.Core.Geometry3D");
                xamlMember.Getter = get_130_BatchedMeshGeometryConfig_Geometry;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig.ModelTransform":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ModelTransform", "SharpDX.Matrix");
                xamlMember.Getter = get_131_BatchedMeshGeometryConfig_ModelTransform;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig.MaterialIndex":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.SharpDX.Core.BatchedMeshGeometryConfig");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MaterialIndex", "Int32");
                xamlMember.Getter = get_132_BatchedMeshGeometryConfig_MaterialIndex;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.BatchedMaterials":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "BatchedMaterials", "System.Collections.Generic.IList`1<HelixToolkit.WinUI.Material>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_BatchedMeshGeometryModel3D_BatchedMaterials;
                xamlMember.Setter = set_133_BatchedMeshGeometryModel3D_BatchedMaterials;
                break;
            case "HelixToolkit.WinUI.Material.Core":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Material");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Core", "HelixToolkit.SharpDX.Core.Model.MaterialCore");
                xamlMember.Getter = get_134_Material_Core;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.Material.Name":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Material");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_Material_Name;
                xamlMember.Setter = set_135_Material_Name;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.PostEffects":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PostEffects", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_BatchedMeshGeometryModel3D_PostEffects;
                xamlMember.Setter = set_136_BatchedMeshGeometryModel3D_PostEffects;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.IsThrowingShadow":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsThrowingShadow", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_BatchedMeshGeometryModel3D_IsThrowingShadow;
                xamlMember.Setter = set_137_BatchedMeshGeometryModel3D_IsThrowingShadow;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.DepthBias":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "DepthBias", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_138_BatchedMeshGeometryModel3D_DepthBias;
                xamlMember.Setter = set_138_BatchedMeshGeometryModel3D_DepthBias;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.SlopeScaledDepthBias":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "SlopeScaledDepthBias", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_139_BatchedMeshGeometryModel3D_SlopeScaledDepthBias;
                xamlMember.Setter = set_139_BatchedMeshGeometryModel3D_SlopeScaledDepthBias;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.IsSelected":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_BatchedMeshGeometryModel3D_IsSelected;
                xamlMember.Setter = set_140_BatchedMeshGeometryModel3D_IsSelected;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.IsMultisampleEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsMultisampleEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_141_BatchedMeshGeometryModel3D_IsMultisampleEnabled;
                xamlMember.Setter = set_141_BatchedMeshGeometryModel3D_IsMultisampleEnabled;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.FillMode":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "FillMode", "SharpDX.Direct3D11.FillMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_142_BatchedMeshGeometryModel3D_FillMode;
                xamlMember.Setter = set_142_BatchedMeshGeometryModel3D_FillMode;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.IsScissorEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsScissorEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_143_BatchedMeshGeometryModel3D_IsScissorEnabled;
                xamlMember.Setter = set_143_BatchedMeshGeometryModel3D_IsScissorEnabled;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.IsDepthClipEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsDepthClipEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_144_BatchedMeshGeometryModel3D_IsDepthClipEnabled;
                xamlMember.Setter = set_144_BatchedMeshGeometryModel3D_IsDepthClipEnabled;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.EnableViewFrustumCheck":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "EnableViewFrustumCheck", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_145_BatchedMeshGeometryModel3D_EnableViewFrustumCheck;
                xamlMember.Setter = set_145_BatchedMeshGeometryModel3D_EnableViewFrustumCheck;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.Material":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Material", "HelixToolkit.WinUI.Material");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_146_BatchedMeshGeometryModel3D_Material;
                xamlMember.Setter = set_146_BatchedMeshGeometryModel3D_Material;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.IsTransparent":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsTransparent", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_147_BatchedMeshGeometryModel3D_IsTransparent;
                xamlMember.Setter = set_147_BatchedMeshGeometryModel3D_IsTransparent;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.RenderWireframe":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "RenderWireframe", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_148_BatchedMeshGeometryModel3D_RenderWireframe;
                xamlMember.Setter = set_148_BatchedMeshGeometryModel3D_RenderWireframe;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.WireframeColor":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "WireframeColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_149_BatchedMeshGeometryModel3D_WireframeColor;
                xamlMember.Setter = set_149_BatchedMeshGeometryModel3D_WireframeColor;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.FrontCounterClockwise":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "FrontCounterClockwise", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_150_BatchedMeshGeometryModel3D_FrontCounterClockwise;
                xamlMember.Setter = set_150_BatchedMeshGeometryModel3D_FrontCounterClockwise;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.CullMode":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CullMode", "SharpDX.Direct3D11.CullMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_151_BatchedMeshGeometryModel3D_CullMode;
                xamlMember.Setter = set_151_BatchedMeshGeometryModel3D_CullMode;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.InvertNormal":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "InvertNormal", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_152_BatchedMeshGeometryModel3D_InvertNormal;
                xamlMember.Setter = set_152_BatchedMeshGeometryModel3D_InvertNormal;
                break;
            case "HelixToolkit.WinUI.BatchedMeshGeometryModel3D.AlwaysHittable":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.BatchedMeshGeometryModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "AlwaysHittable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_153_BatchedMeshGeometryModel3D_AlwaysHittable;
                xamlMember.Setter = set_153_BatchedMeshGeometryModel3D_AlwaysHittable;
                break;
            case "HelixToolkit.WinUI.Light3D.Color":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Light3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_154_Light3D_Color;
                xamlMember.Setter = set_154_Light3D_Color;
                break;
            case "HelixToolkit.WinUI.Light3D.LightType":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.Light3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "LightType", "HelixToolkit.SharpDX.Core.LightType");
                xamlMember.Getter = get_155_Light3D_LightType;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.ItemsModel3D.ItemTemplate":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.ItemsModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_156_ItemsModel3D_ItemTemplate;
                xamlMember.Setter = set_156_ItemsModel3D_ItemTemplate;
                break;
            case "HelixToolkit.WinUI.ItemsModel3D.ItemsSource":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.ItemsModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_157_ItemsModel3D_ItemsSource;
                xamlMember.Setter = set_157_ItemsModel3D_ItemsSource;
                break;
            case "HelixToolkit.WinUI.ItemsModel3D.ItemTemplateSelector":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.ItemsModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ItemTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_158_ItemsModel3D_ItemTemplateSelector;
                xamlMember.Setter = set_158_ItemsModel3D_ItemTemplateSelector;
                break;
            case "HelixToolkit.WinUI.ItemsModel3D.OctreeManager":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.ItemsModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "OctreeManager", "HelixToolkit.WinUI.IOctreeManagerWrapper");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_159_ItemsModel3D_OctreeManager;
                xamlMember.Setter = set_159_ItemsModel3D_OctreeManager;
                break;
            case "HelixToolkit.WinUI.ItemsModel3D.AlwaysHittable":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.ItemsModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "AlwaysHittable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_160_ItemsModel3D_AlwaysHittable;
                xamlMember.Setter = set_160_ItemsModel3D_AlwaysHittable;
                break;
            case "HelixToolkit.WinUI.ItemsModel3D.Children":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.ItemsModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Children", "HelixToolkit.WinUI.ObservableElement3DCollection");
                xamlMember.Getter = get_161_ItemsModel3D_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "HelixToolkit.WinUI.ItemsModel3D.Items":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("HelixToolkit.WinUI.ItemsModel3D");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Items", "Microsoft.UI.Xaml.Controls.ItemCollection");
                xamlMember.Getter = get_162_ItemsModel3D_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "SampleNavigationHelix.Views.HelixPageView.ViewModel":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SampleNavigationHelix.Views.HelixPageView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ViewModel", "SampleNavigationHelix.ViewModels.HelixViewModel");
                xamlMember.Getter = get_163_HelixPageView_ViewModel;
                xamlMember.Setter = set_163_HelixPageView_ViewModel;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AlwaysShowHeader":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "AlwaysShowHeader", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_164_NavigationView_AlwaysShowHeader;
                xamlMember.Setter = set_164_NavigationView_AlwaysShowHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactModeThresholdWidth":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CompactModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_165_NavigationView_CompactModeThresholdWidth;
                xamlMember.Setter = set_165_NavigationView_CompactModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactPaneLength":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_166_NavigationView_CompactPaneLength;
                xamlMember.Setter = set_166_NavigationView_CompactPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ExpandedModeThresholdWidth":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ExpandedModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_167_NavigationView_ExpandedModeThresholdWidth;
                xamlMember.Setter = set_167_NavigationView_ExpandedModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackButtonVisible":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsBackButtonVisible", "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_168_NavigationView_IsBackButtonVisible;
                xamlMember.Setter = set_168_NavigationView_IsBackButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsBackEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_169_NavigationView_IsBackEnabled;
                xamlMember.Setter = set_169_NavigationView_IsBackEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsSettingsVisible":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsSettingsVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_170_NavigationView_IsSettingsVisible;
                xamlMember.Setter = set_170_NavigationView_IsSettingsVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OpenPaneLength":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "OpenPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_171_NavigationView_OpenPaneLength;
                xamlMember.Setter = set_171_NavigationView_OpenPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneTitle":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PaneTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_172_NavigationView_PaneTitle;
                xamlMember.Setter = set_172_NavigationView_PaneTitle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectionFollowsFocus":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "SelectionFollowsFocus", "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_173_NavigationView_SelectionFollowsFocus;
                xamlMember.Setter = set_173_NavigationView_SelectionFollowsFocus;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItems":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_174_NavigationView_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AutoSuggestBox":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "AutoSuggestBox", "Microsoft.UI.Xaml.Controls.AutoSuggestBox");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_175_NavigationView_AutoSuggestBox;
                xamlMember.Setter = set_175_NavigationView_AutoSuggestBox;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ContentOverlay":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ContentOverlay", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_176_NavigationView_ContentOverlay;
                xamlMember.Setter = set_176_NavigationView_ContentOverlay;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.DisplayMode":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "DisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_177_NavigationView_DisplayMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItems":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "FooterMenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_178_NavigationView_FooterMenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItemsSource":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "FooterMenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_179_NavigationView_FooterMenuItemsSource;
                xamlMember.Setter = set_179_NavigationView_FooterMenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.Header":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_180_NavigationView_Header;
                xamlMember.Setter = set_180_NavigationView_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.HeaderTemplate":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_181_NavigationView_HeaderTemplate;
                xamlMember.Setter = set_181_NavigationView_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneOpen":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsPaneOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_182_NavigationView_IsPaneOpen;
                xamlMember.Setter = set_182_NavigationView_IsPaneOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneToggleButtonVisible":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsPaneToggleButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_183_NavigationView_IsPaneToggleButtonVisible;
                xamlMember.Setter = set_183_NavigationView_IsPaneToggleButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneVisible":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsPaneVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_184_NavigationView_IsPaneVisible;
                xamlMember.Setter = set_184_NavigationView_IsPaneVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsTitleBarAutoPaddingEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_185_NavigationView_IsTitleBarAutoPaddingEnabled;
                xamlMember.Setter = set_185_NavigationView_IsTitleBarAutoPaddingEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyle":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_186_NavigationView_MenuItemContainerStyle;
                xamlMember.Setter = set_186_NavigationView_MenuItemContainerStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyleSelector":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyleSelector", "Microsoft.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_187_NavigationView_MenuItemContainerStyleSelector;
                xamlMember.Setter = set_187_NavigationView_MenuItemContainerStyleSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplate":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MenuItemTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_188_NavigationView_MenuItemTemplate;
                xamlMember.Setter = set_188_NavigationView_MenuItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplateSelector":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MenuItemTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_189_NavigationView_MenuItemTemplateSelector;
                xamlMember.Setter = set_189_NavigationView_MenuItemTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemsSource":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_190_NavigationView_MenuItemsSource;
                xamlMember.Setter = set_190_NavigationView_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OverflowLabelMode":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "OverflowLabelMode", "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_191_NavigationView_OverflowLabelMode;
                xamlMember.Setter = set_191_NavigationView_OverflowLabelMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneCustomContent":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PaneCustomContent", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_192_NavigationView_PaneCustomContent;
                xamlMember.Setter = set_192_NavigationView_PaneCustomContent;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneDisplayMode":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PaneDisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_193_NavigationView_PaneDisplayMode;
                xamlMember.Setter = set_193_NavigationView_PaneDisplayMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneFooter":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PaneFooter", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_194_NavigationView_PaneFooter;
                xamlMember.Setter = set_194_NavigationView_PaneFooter;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneHeader":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PaneHeader", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_195_NavigationView_PaneHeader;
                xamlMember.Setter = set_195_NavigationView_PaneHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneToggleButtonStyle":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "PaneToggleButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_196_NavigationView_PaneToggleButtonStyle;
                xamlMember.Setter = set_196_NavigationView_PaneToggleButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectedItem":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_197_NavigationView_SelectedItem;
                xamlMember.Setter = set_197_NavigationView_SelectedItem;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SettingsItem":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "SettingsItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_198_NavigationView_SettingsItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ShoulderNavigationEnabled":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ShoulderNavigationEnabled", "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_199_NavigationView_ShoulderNavigationEnabled;
                xamlMember.Setter = set_199_NavigationView_ShoulderNavigationEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.TemplateSettings":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_200_NavigationView_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.Icon":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "Icon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_201_NavigationViewItem_Icon;
                xamlMember.Setter = set_201_NavigationViewItem_Icon;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.CompactPaneLength":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_202_NavigationViewItem_CompactPaneLength;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.HasUnrealizedChildren":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_203_NavigationViewItem_HasUnrealizedChildren;
                xamlMember.Setter = set_203_NavigationViewItem_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsChildSelected":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsChildSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_204_NavigationViewItem_IsChildSelected;
                xamlMember.Setter = set_204_NavigationViewItem_IsChildSelected;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsExpanded":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_205_NavigationViewItem_IsExpanded;
                xamlMember.Setter = set_205_NavigationViewItem_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItems":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_206_NavigationViewItem_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItemsSource":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_207_NavigationViewItem_MenuItemsSource;
                xamlMember.Setter = set_207_NavigationViewItem_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.SelectsOnInvoked":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "SelectsOnInvoked", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_208_NavigationViewItem_SelectsOnInvoked;
                xamlMember.Setter = set_208_NavigationViewItem_SelectsOnInvoked;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItemBase.IsSelected":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_209_NavigationViewItemBase_IsSelected;
                xamlMember.Setter = set_209_NavigationViewItemBase_IsSelected;
                break;
            case "SampleNavigationHelix.Views.MainWindow.ViewModel":
                userType = (global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SampleNavigationHelix.Views.MainWindow");
                xamlMember = new global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlMember(this, "ViewModel", "SampleNavigationHelix.ViewModels.MainWindowViewModel");
                xamlMember.Getter = get_210_MainWindow_ViewModel;
                xamlMember.Setter = set_210_MainWindow_ViewModel;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::SampleNavigationHelix.SampleNavigationHelix_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

